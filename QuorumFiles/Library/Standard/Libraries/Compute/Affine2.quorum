package Libraries.Compute

use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Compute.Matrix3
use Libraries.Compute.Matrix4
use Libraries.Language.Errors.MatrixError

/*
Affine2 is a specialized three-by-three matrix that represents a series of 2D
transformations, such as translations, scales, flips, rotations, and shears.
The last row of an affine is always 0, 0, 1.

Attribute: Example

use Libraries.Compute.Affine2

Affine2 affine
affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

number row0column0 = affine:row0column0
number row0column1 = affine:row0column1
number row0column2 = affine:row0column2
number row1column0 = affine:row1column0
number row1column1 = affine:row1column1
number row1column2 = affine:row1column2

output "The affine is: "
output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
output "|0, 0, 1|"

*/
class Affine2 
    
    public number row0column0 = 1.0
    public number row0column1 = 0.0
    public number row0column2 = 0.0
    public number row1column0 = 0.0
    public number row1column1 = 1.0
    public number row1column2 = 0.0

    Math math


    /*
    This action constructs an identity matrix. The resulting affine transformation
    is:
        1.0  |   0.0  |   0.0
        0.0  |   1.0  |   0.0
        0.0  |   0.0  |   1.0

    Attribute: Author Amanda Austin

    Attribute: Returns The affine as the identy matrix

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine
    affine:Identity()

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Identity returns Affine2
        row0column0 = 1
        row0column1 = 0
        row0column2 = 0
        row1column0 = 0
        row1column1 = 1
        row1column2 = 0

        return me
    end

    /*
    This action sets the affine transformation to the passed affine transformation.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter other The affine matrix to use to set this affine matrix

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine
    Affine2 setAffine

    setAffine:SetToTranslation(3, 4)

    affine:Set(setAffine)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Set(Affine2 other) returns Affine2
        row0column0 = other:row0column0
        row0column1 = other:row0column1
        row0column2 = other:row0column2
        row1column0 = other:row1column0
        row1column1 = other:row1column1
        row1column2 = other:row1column2

        return me
    end

    /*
    This action sets the affine matrix to the passed 3x3 matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to set as the affine matrix

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Matrix3

    Affine2 affine
    Matrix3 matrix

    matrix:Set(0, 1, 2, 3, 4, 5, 6, 7, 8)

    affine:Set(matrix)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Set(Matrix3 matrix) returns Affine2
        row0column0 = matrix:row0column0
        row0column1 = matrix:row0column1
        row0column2 = matrix:row0column2
        row1column0 = matrix:row1column0
        row1column1 = matrix:row1column1
        row1column2 = matrix:row1column2

        return me
    end

    /*
    This action sets the affine matrix to the 2D transformation components of the
    passed 4x4 matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to set as the affine matrix

    Attribute: Returns The affine after setting
    
    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Matrix4

    Affine2 affine
    Matrix4 matrix

    matrix:Set(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)

    affine:Set(matrix)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Set(Matrix4 matrix) returns Affine2
        row0column0 = matrix:row0column0
        row0column1 = matrix:row0column1
        row0column2 = matrix:row0column3
        row1column0 = matrix:row1column0
        row1column1 = matrix:row1column1
        row1column2 = matrix:row1column3

        return me
    end

    /*
    This action sets the affine matrix to the translation matrix with the
    given x and y translations.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The translation x-coordinate
    Attribute: Parameter y The translation y-coordinate

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslation(3, 4)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslation(number x, number y) returns Affine2
        row0column0 = 1
        row0column1 = 0
        row0column2 = x
        row1column0 = 0
        row1column1 = 1
        row1column2 = y
        
        return me
    end

    /*
    This action sets the affine matrix to the translation matrix with the given
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The translation vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 vector

    vector:Set(3, 4)

    affine:SetToTranslation(vector)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslation(Vector2 vector) returns Affine2
        return SetToTranslation(vector:GetX(), vector:GetY())    
    end

    /*
    This action sets the affine matrix to the scaling matrix with the given
    x and y scales.

    Attribute: Author Amanda Austin

    Attribute: Parameter scaleX The amount to scale in the x-direction
    Attribute: Parameter scaleY The amount to scale in the y-direction

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    
    Affine2 affine

    affine:SetToScaling(2, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToScaling(number scaleX, number scaleY) returns Affine2
        row0column0 = scaleX
        row0column1 = 0
        row0column2 = 0
        row1column0 = 0
        row1column1 = scaleY
        row1column2 = 0

        return me
    end

    /*
    This action sets the affine matrix to the scaling matrix with the given
    scaling vector.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter scale The scaling vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 vector

    vector:Set(2, 2)

    affine:SetToScaling(vector)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToScaling(Vector2 scale) returns Affine2        
        return SetToScaling(scale:GetX(), scale:GetY())     
    end

    /*
    This action sets the affine matrix as the rotation matrix with the given
    rotation angle in degrees.

    Attribute: Author Amanda Austin

    Attribute: Parameter degrees The rotation angle in degrees

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine
    
    affine:SetToRotation(45)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToRotation(number degrees) returns Affine2        
        number cosine = math:Cosine(math:DegreesToRadians(degrees))
        number sine = math:Sine(math:DegreesToRadians(degrees))

        row0column0 = cosine
        row0column1 = sine * -1
        row0column2 = 0
        row1column0 = sine
        row1column1 = cosine
        row1column2 = 0

        return me
    end

    /*
    This action sets the affine matrix to the rotation matrix with the given
    rotation angle in radians.

    Attribute: Author Amanda Austin

    Attribute: Parameter radians The rotation angle in radians

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Math
    
    Math math

    Affine2 affine

    affine:SetToRotationRadians(math:pi / 4)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToRotationRadians(number radians) returns Affine2
        number cosine = math:Cosine(radians)
        number sine = math:Sine(radians)

        row0column0 = cosine
        row0column1 = sine * -1
        row0column2 = 0
        row1column0 = sine
        row1column1 = cosine
        row1column2 = 0

        return me
    end


    /*
    This action sets the affine matrix to the rotation matrix that will rotate any
    vector in the counter-clockwise direction around the z-axis (the axis coming
    out of the screen).

    Attribute: Author Amanda Austin

    Attribute: cosine The cosine of the angle
    Attribute: sine The sine of the angle

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Math

    Math math

    Affine2 affine

    affine:SetToRotation(math:SquareRoot(2) / 2, math:SquareRoot(2) / 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToRotation(number cosine, number sine) returns Affine2
        row0column0 = cosine
        row0column1 = sine * -1
        row0column2 = 0
        row1column0 = sine
        row1column1 = cosine
        row1column2 = 0
        
        return me
    end

    /*
    This action sets the affine matrix to the shearing matrix with the passed
    shear in x and y.

    Attribute: Author Amanda Austin

    Attribute: Parameter shearX The shear in x
    Attribute: Parameter shearY The shear in y

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToShearing(3, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToShearing(number shearX, number shearY) returns Affine2        
        row0column0 = 1
        row0column1 = shearX
        row0column2 = 0
        row1column0 = shearY
        row1column1 = 1
        row1column2 = 0

        return me
    end

    /*
    This action sets the affine matrix to the shearing matrix with the passed
    shear vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The shear vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 vector

    vector:Set(3, 2)

    affine:SetToShearing(vector)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToShearing(Vector2 vector) returns Affine2
        return SetToShearing(vector:GetX(), vector:GetY())        
    end


    /*
    This action sets the affine matrix to the concatenation of translation, rotation,
    and scale. This is more efficient than doing all three transformations
    separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The translation in x
    Attribute: Parameter y The translation in y
    Attribute: Parameter degrees The angle in degrees to rotate
    Attribute: Parameter scaleX The amount to scale in the x-direction
    Attribute: Parameter scaleY The amount to scale in the y-direction

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslationRotationScale(number x, number y, number degrees, number scaleX, number scaleY) returns Affine2    
        row0column2 = x
        row1column2 = y

        if degrees = 0
            row0column0 = scaleX
            row0column1 = 0
            row1column0 = 0
            row1column1 = scaleY
        else            
            number cosine = math:Cosine(math:DegreesToRadians(degrees))
	    number sine = math:Sine(math:DegreesToRadians(degrees))

            row0column0 = cosine * scaleX
            row0column1 = -1 * sine * scaleY
            row1column0 = sine * scaleX
            row1column1 = cosine * scaleY            
        end

        return me
    end

    /*
    This action sets the affine matrix to the concatenation of translation, rotation,
    and scale. This is more efficient than doing all three transformations
    separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter translation The translation vector
    Attribute: Parameter degrees The angle in degrees to rotate
    Attribute: Parameter scale The scale vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 translation
    Vector2 scale

    translation:Set(3, 3)
    scale:Set(2, 2)

    affine:SetToTranslationRotationScale(translation, 45, scale)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"
    
    */
    action SetToTranslationRotationScale(Vector2 translation, number degrees, Vector2 scale) returns Affine2    
        return SetToTranslationRotationScale(translation:GetX(), translation:GetY(), degrees, scale:GetX(), scale:GetY())
    end

    /*
    This action sets the affine matrix to the concatenation of translation, rotation,
    and scale. This is more efficient than doing all three transformations
    separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The translation in x
    Attribute: Parameter y The translation in y
    Attribute: Parameter radians The angle in radians to rotate
    Attribute: Parameter scaleX The amount to scale in the x-direction
    Attribute: Parameter scaleY The amount to scale in the y-direction

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Math

    Math math

    Affine2 affine

    affine:SetToTranslationRotationRadiansScale(3, 3, math:pi / 4, 2, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslationRotationRadiansScale(number x, number y, number radians, number scaleX, number scaleY) returns Affine2        
        row0column2 = x
        row1column2 = y

        if radians = 0
            row0column0 = scaleX
            row0column1 = 0
            row1column0 = 0
            row1column1 = scaleY
        else            
            sine = math:Sine(radians)
            cosine = math:Cosine(radians)

            row0column0 = cosine * scaleX
            row0column1 = -1 * sine * scaleY
            row1column0 = sine * scaleX
            row1column1 = cosine * scaleY            
        end
        
        return me
    end

    /*
    This action sets the affine matrix to the concatenation of translation, rotation,
    and scale. This is more efficient than doing all three transformations
    separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter translation The translation vector
    Attribute: Parameter degrees The angle in radians to rotate
    Attribute: Parameter scale The scale vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2
    use Libraries.Compute.Math

    Math math

    Affine2 affine
    Vector2 translation
    Vector2 scale

    translation:Set(3, 3)
    scale:Set(2, 2)

    affine:SetToTranslationRotationRadiansScale(translation, math:pi / 4, scale)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslationRotationRadiansScale(Vector2 translation, number radians, Vector2 scale) returns Affine2    
        return SetToTranslationRotationRadiansScale(translation:GetX(), translation:GetY(), radians, scale:GetX(), scale:GetY())
    end

    /*
    This action sets the affine matrix to the concatenation of translation and
    scale. This is more efficient than doing both separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The translation in x
    Attribute: Parameter y The translation in y
    Attribute: Parameter scaleX The scale in the x-direction
    Attribute: Parameter scaleY The scale in the y-direction

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationScale(3, 3, 2, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslationScale(number x, number y, number scaleX, number scaleY) returns Affine2        
        row0column0 = scaleX
        row0column1 = 0
        row0column2 = x
        row1column0 = 0
        row1column1 = scaleY
        row1column2 = y
        
        return me
    end


    /*
    This action sets the affine matrix to the concatenation of translation and
    scale. This is more efficient than doing both separately.

    Attribute: Author Amanda Austin

    Attribute: Parameter translation The translation vector
    Attribute: Parameter scale The scale vector

    Attribute: Returns The affine after setting

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 translation
    Vector2 scale

    translation:Set(3, 3)
    scale:Set(2, 2)

    affine:SetToTranslationScale(translation, scale)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToTranslationScale(Vector2 translation, Vector2 scale) returns Affine2        
        return SetToTranslationScale(translation:GetX(), translation:GetY(), scale:GetX(), scale:GetY())       
    end

    /*
    This action sets the affine matrix to the product of the passed affine
    matrices.

    Attribute: Author Amanda Austin

    Attribute: Parameter left The left affine matrix
    Attribute: Parameter right The right affine matrix

    Attribute: Returns The affine after setting as the product

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine
    Affine2 left
    Affine2 right

    left:SetToTranslationScale(3, 3, 2, 2)
    right:SetToTranslationRotationScale(2, 3, 45, 2, 2)

    affine:SetToProduct(left, right)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action SetToProduct(Affine2 left, Affine2 right) returns Affine2
        row0column0 = left:row0column0 * right:row0column0 + left:row0column1 * right:row1column0
        row0column1 = left:row0column0 * right:row0column1 + left:row0column1 * right:row1column1
        row0column2 = left:row0column0 * right:row0column2 + left:row0column1 * right:row1column2 + left:row0column2
        row1column0 = left:row1column0 * right:row0column0 + left:row1column1 * right:row1column0
        row1column1 = left:row1column0 * right:row0column1 + left:row1column1 * right:row1column1
        row1column2 = left:row1column0 * right:row0column2 + left:row1column1 * right:row1column2 + left:row1column2

        return me
    end

    /*
    This action inverts the affine matrix.

    Attribute: Author Amanda Austin

    Attribute: Returns The inverted affine

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:Invert()

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Invert returns Affine2
        number determinant = Determinant()

        if determinant = 0
            MatrixError matrix
            matrix:SetErrorMessage("Affine is not invertable if the determinant computes to 0.")
            alert(matrix)
        end

        number inverseDeterminant = 1.0 / determinant

        number tmp00 = row1column1
        number tmp01 = -1 * row0column1
        number tmp02 = row0column1 * row1column2 - row1column1 * row0column2
        number tmp10 = -1 * row1column0
        number tmp11 = row0column0
        number tmp12 = row1column0 * row0column2 - row0column0 * row1column2

        row0column0 = inverseDeterminant * tmp00
        row0column1 = inverseDeterminant * tmp01
        row0column2 = inverseDeterminant * tmp02
        row1column0 = inverseDeterminant * tmp10
        row1column1 = inverseDeterminant * tmp11
        row1column2 = inverseDeterminant * tmp12

        return me
    end


    /*
    This action multiplies this affine matrix with the passed affine matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter affine The affine matrix to multiply by
    
    Attribute: Returns The affine as the product

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine
    Affine2 other

    affine:SetToTranslationRotationScale(2, 2, 45, 3, 3)
    other:SetToTranslationScale(1, 1, 3, 3)

    affine:Multiply(other)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Multiply(Affine2 affine) returns Affine2        
        number tmp00 = row0column0 * affine:row0column0 + row0column1 * affine:row1column0
        number tmp01 = row0column0 * affine:row0column1 + row0column1 * affine:row1column1
        number tmp02 = row0column0 * affine:row0column2 + row0column1 * affine:row1column2 + row0column2
        number tmp10 = row1column0 * affine:row0column0 + row1column1 * affine:row1column0
        number tmp11 = row1column0 * affine:row0column1 + row1column1 * affine:row1column1
        number tmp12 = row1column0 * affine:row0column2 + row1column1 * affine:row1column2 + row1column2

        row0column0 = tmp00
        row0column1 = tmp01
        row0column2 = tmp02
        row1column0 = tmp10
        row1column1 = tmp11
        row1column2 = tmp12

        return me
    end

    /*
    This action multiplies the affine matrix with the translation matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x-component of the translation vector
    Attribute: Parameter y The y-component of the translation vector

    Attribute: Returns The affine translated

    Attribute: Example

    use Libraries.Compute.Affine2
    
    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)
    
    affine:Translate(4, 3)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Translate(number x, number y) returns Affine2
        row0column2 = row0column2 + (row0column0 * x + row0column1 * y)
        row1column2 = row1column2 + (row1column0 * x + row1column1 * y)
        
        return me
    end

    /*
    This action multiplies this affine matrix with the translation matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter translate The translation vector

    Attribute: Returns The affine translated

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 vector

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    vector:Set(4, 3)

    affine:Translate(vector)
    */
    action Translate(Vector2 translate) returns Affine2        
        return Translate(translate:GetX(), translate:GetY())
    end

    /*
    This action multiplies the affine matrix with the scale matrix.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter scaleX The scale in the x-direction
    Attribute: Parameter scaleY The scale in the y-direction

    Attribute: Returns The affine scaled

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:Scale(4, 4)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Scale(number scaleX, number scaleY) returns Affine2
        row0column0 = row0column0 * scaleX
        row0column1 = row0column1 * scaleY
        row1column0 = row1column0 * scaleX
        row1column1 = row1column1 * scaleY

        return me
    end

    /*
    This action multiplies the affine matrix with the scale matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter scale The scale vector

    Attribute: Returns The affine scaled

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2
    
    Affine2 affine
    Vector2 vector

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)
    vector:Set(4, 4)

    affine:Scale(vector)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Scale(Vector2 scale) returns Affine2
        return Scale(scale:GetX(), scale:GetY())        
    end

    /*
    This action multiplies the affine matrix with the (counter-clockwise)
    rotation matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter degrees The angle in degrees
    
    Attribute: Returns The affine rotated

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:Rotate(90)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Rotate(number degrees) returns Affine2
        if degrees = 0
            return me
        end
            
        number cosine = math:Cosine(math:DegreesToRadians(degrees))
        number sine = math:Sine(math:DegreesToRadians(degrees))

        number tmp00 = row0column0 * cosine + row0column1 * sine
        number tmp01 = row0column0 * (-1 * sine) + row0column1 * cosine
        number tmp10 = row1column0 * cosine + row1column1 * sine
        number tmp11 = row1column0 * (-1 * sine) + row1column1 * cosine

        row0column0 = tmp00
        row0column1 = tmp01
        row1column0 = tmp10
        row1column1 = tmp11

        return me
   end

    /*
    This action multiplies the affine matrix with the (counter-clockwise)
    rotation matrix.

    Attribute: Author Amanda Austin

    Attribute: Parameter radians The angle in radians
    
    Attribute: Returns The affine rotated

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Math

    Affine2 affine
    Math math

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:RotateRadians(math:pi / 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action RotateRadians(number radians) returns Affine2
        if radians = 0
            return me
        end
            
        number cosine = math:Cosine(radians)
        number sine = math:Sine(radians)

        number tmp00 = row0column0 * cosine + row0column1 * sine
        number tmp01 = row0column0 * (-1 * sine) + row0column1 * cosine
        number tmp10 = row1column0 * cosine + row1column1 * sine
        number tmp11 = row1column0 * (-1 * sine) + row1column1 * cosine

        row0column0 = tmp00
        row0column1 = tmp01
        row1column0 = tmp10
        row1column1 = tmp11

        return me
    end

    /*
    This action multiplies the affine matrix by the shear matrix.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter shearX The shear in the x-direction
    Attribute: Parameter shearY The shear in the y-direction

    Attribute: Returns The affine sheared

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:Shear(2, 2)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Shear(number shearX, number shearY) returns Affine2
        number tmp0 = row0column0 + shearY * row0column1
        number tmp1 = row0column1 + shearX * row0column0
        row0column0 = tmp0
        row0column1 = tmp1

        tmp0 = row1column0 + shearY * row1column1
        tmp1 = row1column1 + shearX * row1column0
        row1column0 = tmp0
        row1column1 = tmp1

        return me
    end

    /*
    This action multiplies the affine matrix by the shear matrix.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter shear The shear vector

    Attribute: Returns The affine sheared

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 vector

    vector:Set(2, 2)
    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    affine:Shear(vector)

    number row0column0 = affine:row0column0
    number row0column1 = affine:row0column1
    number row0column2 = affine:row0column2
    number row1column0 = affine:row1column0
    number row1column1 = affine:row1column1
    number row1column2 = affine:row1column2

    output "The affine is: "
    output "|" + row0column0 + ", " + row0column1 + ", " + row0column2 + "|"
    output "|" + row1column0 + ", " + row1column1 + ", " + row1column2 + "|"
    output "|0, 0, 1|"

    */
    action Shear(Vector2 shear) returns Affine2
        return Shear (shear:GetX(), shear:GetY())
    end

    /*
    This action calculates the determinant of the affine matrix.

    Attribute: Author Amanda Austin

    Attribute: Returns The determinant of the affine matrix

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    number determinant = affine:Determinant()

    output "The determinant is " + determinant

    */
    action Determinant returns number
        return row0column0 * row1column1 - row0column1 * row1column0
    end


    /*
    This action gets the x and y translation component of the affine matrix.

    Attribute: Author Amanda Austin

    Attribute: Returns the position vector of the translation

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 translation

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    translation = affine:GetTranslation()

    number x = translation:GetX()
    number y = translation:GetY()

    output "The translation vector is [" + x + ", " + y + "]"

    */
    action GetTranslation returns Vector2
        Vector2 position
        position:Set(row0column2, row1column2)

        return position
    end

    /*
    This action determines whether this affine matrix is a translation matrix.
    
    Attribute: Author Amanda Austin

    Attribute: Returns true if matrix is a translation matrix and false if it is not

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    affine:SetToTranslation(3, 2)

    if affine:IsTranslation()
        output "The affine is a translation affine"
    else
        output "The affine is not a translation affine"
    end

    */
    action IsTranslation returns boolean
        return row0column0 = 1 and row1column1 = 1 and row0column1 = 0 and row1column0 = 0
    end

    /*
    This action determines whether this affine matrix is the identity matrix.

    Attribute: Author Amanda Austin
    
    Attribute: Returns true if matrix is the identity matrix and false if it is not

    Attribute: Example

    use Libraries.Compute.Affine2

    Affine2 affine

    if affine:IsIdentityMatris()
        output "The affine is the identity matrix."
    else
        output "The affine is not the identity matrix."
    end

    */
    action IsIdentity returns boolean
        return row0column0 = 1 and row0column1 = 0 and row0column2 = 0 and row1column0 = 0 and row1column1 = 1 and row1column2 = 0
    end
    
    /*
    This action applies the affine transformation(s) to the passed point. The
    passed vector representing the point is altered as a result of this action.

    Attribute: Author Amanda Austin

    Attribute: Parameter point The point to apply the transformations to

    Attribute: Example

    use Libraries.Compute.Affine2
    use Libraries.Compute.Vector2

    Affine2 affine
    Vector2 point

    affine:SetToTranslationRotationScale(3, 3, 45, 2, 2)

    point:Set(3, 4)

    affine:ApplyAffineTransformation(point)

    number x = point:GetX()
    number y = point:GetY()

    output "The new point is [" + x + ", " + y + "]"

    */
    action ApplyTo(Vector2 point)    
        number x = point:GetX()
        number y = point:GetY()

        point:Set(row0column0 * x + row0column1 * y + row0column2, row1column0 * x + row1column1 * y + row1column2)
    end 
end