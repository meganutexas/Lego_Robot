package Libraries.Compute

use Libraries.Compute.Vector3
use Libraries.Compute.Matrix4

/*
This class represents a ray. A ray has a starting position and a unit length
direction.
*/
class Ray
    Vector3 origin
    Vector3 direction

    Vector3 temporaryVector

    /*
    This action sets the ray using the passed origin and direction vectors.

    Attribute: Author Amanda Austin

    Attribute: Parameter: origin The origin of the Ray
    Attribute: Parameter: direction The direction of the Ray

    Attribute: Returns The Ray after being set
    */
    action Set(Vector3 origin, Vector3 direction) returns Ray
        me:origin:Set(origin)
        me:direction:Set(direction)
        return me
    end

    /*
    This action sets the ray using the passed origin and direction vectors.

    Attribute: Author Amanda Austin

    Attribute: Parameter: originX The x-coordinate of the origin of the Ray
    Attribute: Parameter: originY The y-coordinate of the origin of the Ray
    Attribute: Parameter: originZ The z-coordinate of the origin of the Ray
    Attribute: Parameter: directionX The x component of the direction of the Ray
    Attribute: Parameter: directionY The y component of the direction of the Ray
    Attribute: Parameter: directionZ The z component of the direction of the Ray

    Attribute: Returns The Ray after being set
    */
    action Set(number originX, number originY, number originZ, number directionX, number directionY, number directionZ) returns Ray
        origin:Set(originX, originY, originZ)
        direction:Set(directionX, directionY, directionZ)
        return me
    end

    /*
    This action sets the ray using the direction and orgin of the passed ray.

    Attribute: Author Amanda Austin

    Attribute: Parameter ray The Ray to use to set this ray

    Attribute: Returns The Ray after being set
    */
    action Set(Ray ray) returns Ray
        me:origin:Set(ray:GetOrigin())
        me:direction:Set(ray:GetDirection())
        return me
    end

    /*
    This action sets the direction of the ray to the passed direction vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter direction The vector to set as the direction of the Ray
    */
    action SetDirection(Vector3 direction)
        me:direction:Set(direction)
    end

    /*
    This action sets the origin of the ray to the passed origin vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter origin The vector to set as the origin of the Ray
    */
    action SetOrigin(Vector3 origin)
        me:origin:Set(origin)
    end

    /*
    This action returns the direction of the Ray.

    Attribute: Author Amanda Austin

    Attribute: Returns The direction vector of the Ray
    */
    action GetDirection returns Vector3
        return direction
    end

    /*
    This action returns the origin of the Ray.

    Attribute: Author Amanda Austin

    Attribute: Returns The origin vector of the Ray
    */
    action GetOrigin returns Vector3
        return origin
    end

    /*
    This action creates a new Ray that is a copy of this Ray.

    Attribute: Author Amanda Austin

    Attribute: Returns A new Ray that is a copy of this Ray
    */
    action Copy returns Ray
        Ray ray
        ray:SetOrigin(me:origin)
        ray:SetDirection(me:direction)
        return ray
    end
    
    /*
    This action returns the endpoint of the Ray given the distance. The calculation
    is:
        startpoint + distance * direction.

    Attribute: Author Amanda Austin

    Attribute: Parameter distance The distance from the end point to the start point

    Attribute: Returns The endpoint given the distance as a Vector
    */
    action GetEndPoint(number distance) returns Vector3
        Vector3 out
        out:Set(direction)
        out:Scale(distance)
        out:Add(origin)
        return out
    end

    /*
    This action multiplies the Ray by the passed matrix. This action can be used
    to transform this ray into another coordinate system.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to multiply the Ray by

    Attribute: Returns The result of the multiplication
    */
    action Multiply(Matrix4 matrix) returns Ray
        temporaryVector:Set(origin)
        temporaryVector:Add(direction)
        temporaryVector:Multiply(matrix)
        origin:Multiply(matrix)
        temporaryVector:Subtract(origin)
        direction:Set(temporaryVector)
        return me
    end


    /*
    This action determines if the passed ray is equal to this ray. Two Rays are
    equal if their origins and directions are the same.

    Attribute: Author Amanda Austin

    Attribute: Parameter ray The Ray to check as equal to this Ray

    Attribute: Returns true if the two rays are equal, false otherwise
    */
    action Equals(Ray ray) returns boolean
        if ray = me
            return true
        end
        
        return me:direction:Equals(ray:GetDirection()) and me:origin:Equals(ray:GetOrigin())
    end
end