package Libraries.Compute

use Libraries.Compute.Math
use Libraries.Compute.Matrix3
use Libraries.Compute.Matrix4
use Libraries.Compute.Quaternion
use Libraries.Compute.Vector2
use Libraries.Containers.Array

/*
Vector3 is a class representing a vector in 3D space.

Attribute: Author Amanda Austin

Attribute: Example

use Libraries.Compute.Vector3

Vector3 vector1
Vector3 vector2

vector1:Set(2, 6, 9)
vector2:Set(1, 7, 2)

vector1:CrossProduct(vector2)

number newX = vector1:GetX()
number newY = vector1:GetY()

output "The cross product of the two vectors is: [" + newX + ", " + newY + "]"
*/
class Vector3 

    number x = 0
    number y = 0
    number z = 0

    Math math
    constant number ROUNDING_MARGIN = 0.000001

    /*
    This action returns the x component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the x component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number x = vector:GetX()
    output "The x component is: " + x

    */
    action GetX returns number
        return x
    end

    /*
    This action returns the y component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the y component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number y = vector:GetY()
    output "The y component is: " + y

    */
    action GetY returns number
        return y
    end

    /*
    This action returns the z component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the z component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number z = vector:GetZ()
    output "The z component is: " + z

    */
    action GetZ returns number
        return z
    end

    /*
    This action sets the x, y, and z components of the vector to the passed x, y,
    and z values.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue the value to set as the x component
    Attribute: Parameter yValue the value to set as the y component
    Attribute: Parameter zValue the value to set as the z component

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 vector
    vector:Set(8.8, 4.2, 9.2)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"


    */
    action Set(number xValue, number yValue, number zValue) returns Vector3
        x = xValue
        y = yValue
        z = zValue
        return me
    end

    /*
    This action sets the vector's components to the components of the passed
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector the vector to use to set the components

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    firstVector:Set(2.4, 4.3, 2.7)
    
    Vector3 secondVector
    secondVector:Set(firstVector)

    number newX = secondVector:GetX()
    number newY = secondVector:GetY()
    number newZ = secondVector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Set(Vector3 vector) returns Vector3
        return Set(vector:GetX(), vector:GetY(), vector:GetZ())
    end

    /*
    This action sets the x, y, and z components of the vector to the elements of
    the passed array. The x component is assigned the element at array position
    0, the y component the element at array position 1, and the z component the
    element at array position 2.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter array The array containing the numbers to assign as the x, y, and z components of the vector

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Containers.Array

    Vector3 vector
    Array<number> array

    array:Add(3.0)
    array:Add(-4.5)
    array:Add(5.2)

    vector:Set(array)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Set(Array<number> array) returns Vector3
        return Set(array:Get(0), array:Get(1), array:Get(2))
    end

    /*
    This action sets the vector's x and y components to the x and y components
    of the passed 2D vector and sets the z component to the passed z value.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The 2D vector to set this vector's x and y components
    Attribute: Parameter z The value to set the z component to

    Attribute: Returns The calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Vector2

    Vector3 vector
    Vector2 setVector
    
    setVector:Set(3.5, -7.0)
    
    vector:Set(setVector, 4.2)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Set(Vector2 vector, number z) returns Vector3
        return Set(vector:GetX(), vector:GetY(), z)
    end

    /*
    This action sets the x component of the vector to the passed value.

    Attribute: Author Amanda Austin

    Attribute: Parameter newX The value to set as the x component

    */
    action SetX(number newX)
        x = newX
    end

    /*
    This action sets the y component of the vector to the passed value.

    Attribute: Author Amanda Austin

    Attribute: Parameter newY The value to set as the y component

    */
    action SetY(number newY)
        y = newY
    end

    /*
    This action sets the z component of the vector to the passed value.

    Attribute: Author Amanda Austin

    Attribute: Parameter newZ The value to set as the z component

    */
    action SetZ(number newZ)
        z = newZ
    end

    /*
    This action returns a copy of the current vector. The new vector's x, y, and
    z components are the same as the calling vector's x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Returns a new vector that is a copy of the calling vector

    Attribute: Example
    
    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(4.8, 3.2, -4.2)
    
    Vector3 copyVector
    copyVector = vector:Copy()

    number newX = copyVector:GetX()
    number newY = copyVector:GetY()
    number newZ = copyVector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Copy returns Vector3
        Vector3 temp
        temp:Set(x, y, z)
        return temp
    end

    /*
    This action adds the passed vector to the calling vector. This action
    changes the calling vector to the result of the addition.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The vector to add
    
    Attribute: Returns The calling vector after addition

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.2, 5.5, 9.0)
    secondVector:Set(8.3, 4.2, -7.3)
    
    firstVector:Add(secondVector)

    number newX = firstVector:GetX()
    number newY = firstVector:GetY()
    number newZ = firstVector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"  
  
    */
    action Add(Vector3 vector) returns Vector3
        return Add(vector:GetX(), vector:GetY(), vector:GetZ())
    end

    /*
    This action adds the vector with the passed x, y, and z components to the
    calling vector. This changes the calling vector to the result of the 
    addition.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the vector to add
    Attribute: Parameter yValue The y component of the vector to add
    Attribute: Parameter zValue The z component of the vector to add

    Attribute: Returns The calling vector after addition

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(4.3, 8.1, 6.6)

    vector:Add(3.3, 9.2, -4.3)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Add(number xValue, number yValue, number zValue) returns Vector3
        return Set(x + xValue, y + yValue, z + zValue)
    end

    /*
    This action adds the passed value to the x, y, and z components of the
    vector. This changes the vector to the result of the addition.

    Attribute: Author Amanda Austin

    Attribute: Parameter value The value to add to the x, y, and z components

    Attribute: Returns The vector after addition

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(3.5, 5.0, 3.1)

    vector:Add(4.0)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    
    */
    action Add(number value) returns Vector3
        return Set(x + value, y + value, z + value)
    end

    /*
    This action subtracts the passed vector from the calling vector. This
    changes the calling vector to the result of the subtraction.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The vector to subtract
    
    Attribute: Returns The calling vector after subtraction

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(9.0, 8.0, 7.0)
    secondVector:Set(6.0, 5.0, 4.0)
    
    firstVector:Subtract(secondVector)
    
    number newX = firstVector:GetX()
    number newY = firstVector:GetY()
    number newZ = firstVector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Subtract(Vector3 vector) returns Vector3
        return Subtract(vector:GetX(), vector:GetY(), vector:GetZ())
    end


    /*
    This action subtracts a vector with the passed components from the calling 
    vector. This action changes the calling vector to the result of the
    subtraction.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the vector to subtract
    Attribute: Parameter yValue The y component of the vector to subtract
    Attribute: Parameter zValue The z component of the vector to subtract
    
    Attribute: Returns The calling vector after subtraction

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector

    vector:Set(9.0, 8.0, 7.0)
    
    vector:Subtract(6.0, 5.0, 4.0)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Subtract(number xValue, number yValue, number zValue) returns Vector3
        return Set(x - xValue, y - yValue, z - zValue)        
    end

    /*
    This action subtracts the passed value from the x, y, and z components of
    the vector. This changes the vector to the result of the subtraction.

    Attribute: Author Amanda Austin

    Attribute: Parameter value The value to subtract from the x, y, and z components

    Attribute: Returns The vector after subtraction

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(3.5, 5,0, 3.1)

    vector:Subtract(2.0)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    
    */
    action Subtract(number value) returns Vector3
        return Set(x - value, y - value, z - value)
    end

    /*
    This action scales the vector by multiplying the x, y, and z components by
    the passed scalar value.

    Attribute: Author Amanda Austin

    Attribute: Parameter scalar The scalar value to multiply by
    
    Attribute: Returns The calling vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 3.0, 4.0)

    vector:Scale(2.0)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Scale(number scalar) returns Vector3
        return Set(x * scalar, y * scalar, z * scalar)
    end

    /*
    This action scales the vector by multiplying the x component by the x 
    component of the passed vector, the y component by the y component of the 
    passed vector, and the z component by the z component of the passed vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The vector to scale by
    
    Attribute: Returns The calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 vector 
    Vector3 scaleVector
    
    vector:Set(2.0, 3.0, 4.0)
    scaleVector:Set(3.0, 4.0, 2.0)

    vector:Scale(scaleVector)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Scale(Vector3 vector) returns Vector3
        return Set(x * vector:GetX(), y * vector:GetY(), z * vector:GetZ())
    end

    /*
    This action scales the vector by multiplying the x component with the
    passed x value, the y component with the passed y value, and the z component
    with the passed z value.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The value to multiply the x component by
    Attribute: Parameter yValue The value to multiply the y component by
    Attribute: Parameter zValue The value to multiply the z component by

    Attribute: Returns The calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 vector
    vector:Set(2.0, 3.0, 4.0)

    vector:Scale(3.0, 4.0, 2.0)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Scale(number xValue, number yValue, number zValue) returns Vector3
        return Set(x * xValue, y * yValue, z * zValue)
    end

    /*
    This action multiplies the passed vector by the passed scalar and adds the
    result to the calling vector. This changes the calling vector to the result
    of the multiplication and addition.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter vector The vector to multiply by the scalar
    Attribute: Parameter scalar The value to multiply the vector by
    
    Attribute: Returns The calling vector after multiplication and addition

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector
    Vector3 addVector
    
    vector:Set(4.0, 7.0, 5.0)
    addVector:Set(2.5, 1.5, 2.0)
    
    vector:MultiplyAndAdd(addVector, 2.0)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action MultiplyAndAdd(Vector3 vector, number scalar) returns Vector3
        x = x + vector:GetX() * scalar
        y = y + vector:GetY() * scalar
        z = z + vector:GetZ() * scalar
        return me
    end

    /*
    This action multiplies the passed vector by the passed scalar vector and
    adds the result to the calling vector. This changes the calling vector to
    the result of the multiplication and addition.

    Attribute: Author Amanda Austin

    Attribute: Parameter addVector The vector to multiply by the scale vector
    Attribute: Parameter scaleVector The vector to multiply the add vector by

    Attribute: Returns The calling vector after multiplication and addition

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    Vector3 addVector
    Vector3 scaleVector

    vector:Set(4.0, 7.0, 5.0)
    addVector:Set(2.0, 3.0, 1.0)
    scaleVector:Set(3.0, 1.0, 2.0)

    vector:MultiplyAndAdd(addVector, scaleVector)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action MultiplyAndAdd(Vector3 addVector, Vector3 scaleVector) returns Vector3
        x = x + addVector:GetX() * scaleVector:GetX()
        y = y + addVector:GetY() * scaleVector:GetY()
        z = z + addVector:GetZ() * scaleVector:GetZ()
        return me
    end

    /*
    This action returns the length of the vector measured from the origin (0, 0)

    Attribute: Author Amanda Austin

    Attribute: Returns the length of the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1.0, 2.0, 2.0)
    
    number length = vector:Length()
    output "The length of the vector is " + length

    */
    action Length returns number
        return math:SquareRoot(x * x + y * y + z * z)
    end

    /*
    This action returns the length of the vector with the passed x, y, and z 
    components measured from the origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x component of the vector
    Attribute: Parameter y The y component of the vector
    Attribute: Parameter z The z component of the vector

    Attribute: Returns The length of the vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    
    number length = vector:Length(1.0, 2.0, 2.0)
    output "The length of the vector is " + length

    */
    action Length(number x, number y, number z) returns number
        return math:SquareRoot(x * x + y * y + z * z)
    end

    /*
    This action returns the square of the length of the vector with the passed 
    x, y, and z components measured from the origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x component of the vector
    Attribute: Parameter y The y component of the vector
    Attribute: Parameter z The z component of the vector

    Attribute: Returns The square of the length of the vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    
    number lengthSquared = vector:LengthSquared(1.0, 2.0, 2.0)
    output "The square of the length of the vector is " + lengthSquared

    */
    action LengthSquared(number x, number y, number z) returns number
        return x * x + y * y + z * z
    end

    /*
    This action returns the square of the length of the vector measured from the 
    origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Returns The square of the length of the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    number lengthSquared = vector:LengthSquared()
    output "The square of the length of the vector is " + lengthSquared

    */
    action LengthSquared returns number
        return x * x + y * y + z * z
    end

    /*
    This action determines whether the passed vector is equal to this vector.
    Two vectors are equal if they have the same x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The vector to check if equal

    Attribute: Returns true if the two vectors are equal, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(2.0, 3.0, 4.0)
    secondVector:Set(2.0, 3.0, 4.0)

    boolean areEqual = firstVector:Equals(secondVector)

    if areEqual
        output "The two vectors are equal."
    else
        output "The two vectors are not equal."
    end

    */
    action Equals(Vector3 vector) returns boolean
        return x = vector:GetX() and y = vector:GetY() and z = vector:GetZ()
    end

    /*
    This action computes the distance between the vectors represented by the
    passed x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter x1 The x component of the first vector
    Attribute: Parameter y1 The y component of the first vector
    Attribute: Parameter z1 The z component of the first vector
    Attribute: Parameter x2 The x component of the second vector
    Attribute: Parameter y2 The y component of the second vector
    Attribute: Parameter z2 The z component of the second vector
    
    Attribute: Returns The distance between the two vectors

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    number distance = vector:Distance(2.0, 3.0, 4.0, 2.0, 5.0, 1.0)
    output "The distance is " + distance

    */
    action Distance(number x1, number y1, number z1, number x2, number y2, number z2) returns number
        number a = x2 - x1
        number b = y2 - y1
        number c = z2 - z1
        return math:SquareRoot(a * a + b * b + c * c)
    end
    
    /*
    This action computes the distance between the calling vector and the passed
    vector.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    
    Attribute: Returns The distance between the two vectors

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector
    Vector3 otherVector
    
    vector:Set(2.0, 3.0, 4.0)
    otherVector:Set(2.0, 5.0, 1.0)
    
    number distance = vector:Distance(otherVector)
    output "The distance is " + distance

    */
    action Distance(Vector3 vector) returns number
        number a = vector:GetX() - x
        number b = vector:GetY() - y
        number c = vector:GetZ() - z
        return math:SquareRoot(a * a + b * b + c * c)
    end

    /*
    This action computes the distance between the calling vector and the vector
    represented by the passed x, y, and z components.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector
    
    Attribute: Returns The distance between the two vectors

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector
    
    vector:Set(2.0, 3.0, 4.0)
    
    number distance = vector:Distance(2.0, 5.0, 1.0)
    output "The distance is " + distance

    */
    action Distance(number xValue, number yValue, number zValue) returns number
        number a = xValue - x
        number b = yValue - y
        number c = zValue - z
        return math:SquareRoot(a * a + b * b + c * c)
    end

    /*
    This action computes the square of the distance between the vectors
    represented by the passed x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter x1 The x component of the first vector
    Attribute: Parameter y1 The y component of the first vector
    Attribute: Parameter z1 The z component of the first vector
    Attribute: Parameter x2 The x component of the second vector
    Attribute: Parameter y2 The y component of the second vector
    Attribute: Parameter z2 The z component of the second vector
    
    Attribute: Returns The square of the distance between the two vectors

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    number distanceSquared = vector:DistanceSquared(2.0, 3.0, 4.0, 2.0, 5.0, 1.0)
    output "The square of the distance is " + distanceSquared

    */
    action DistanceSquared(number x1, number y1, number z1, number x2, number y2, number z2)returns number
        number a = x2 - x1
        number b = y2 - y1
        number c = z2 - z1
        return a * a + b * b + c * c
    end

    /*
    This action computes the square of the distance between the calling vector
    and the passed vector.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    
    Attribute: Returns The square of the distance between the two vectors

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector
    Vector3 otherVector
    
    vector:Set(2.0, 3.0, 4.0)
    otherVector:Set(2.0, 5.0, 1.0)
    
    number distanceSquared = vector:DistanceSquared(otherVector)
    output "The square of the distance is " + distanceSquared

    */
    action DistanceSquared(Vector3 vector) returns number
        number a = vector:GetX() - x
        number b = vector:GetY() - y
        number c = vector:GetZ() - z
        return a * a + b * b + c * c
    end

/*
    This action computes the square of the distance between the calling vector
    and the vector represented by the passed x, y, and z components.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector
    
    Attribute: Returns The square of the distance between the two vectors

    Attribute: Example
    
    use Libraries.Compute.Vector3
    
    Vector3 vector
    
    vector:Set(2.0, 3.0, 4.0)
    
    number distanceSquared = vector:DistanceSquared(2.0, 5.0, 1.0)
    output "The square of the distance is " + distanceSquared

    */
    action DistanceSquared(number xValue, number yValue, number zValue) returns number
        number a = xValue - x
        number b = yValue - y
        number c = zValue - z
        return a * a + b * b + c * c
    end

    /*
    This action produces a normalized vector with the same direction as the
    original vector but with a length of 1. This action changes the calling
    vector to the normalized vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the normalized vector with a length of 1

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(23.4, 43.2, 45.6)
    vector:Normalize()

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The normalized vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Normalize returns Vector3
        number len2 = me:LengthSquared()
        if len2 = 0.0 or len2 = 1.0
            return me
        end

        return me:Scale(1.0 / math:SquareRoot(len2))
    end         

    /*
    This action computes the dot product between the calling vector and the
    passed vector.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter vector The other vector

    Attribute: Returns The dot product of the two vectors

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(5.0, 6.0, 7.0)
    
    number dotProduct = firstVector:DotProduct(secondVector)
    output "The dot product is " + dotProduct

    */
    action DotProduct(Vector3 vector) returns number
        return x * vector:GetX() + y * vector:GetY() + z * vector:GetZ()
    end

    /*
    This action computes the dot product between the calling vector and the
    vector with the passed x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector

    Attribute: Returns The dot product of the two vectors

    Attribute: Example
    
    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(3.0, 4.0, 5.0)
    
    number dotProduct = vector:DotProduct(4.0, 5.0, 6.0)
    output "The dot product is " + dotProduct

    */
    action DotProduct(number xValue, number yValue, number zValue) returns number
        return x * xValue + y * yValue + z * zValue
    end

    /*
    This action computes the dot product of the two vectors given by the passed
    x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter x1 The x component of the first vector
    Attribute: Parameter y1 The y component of the first vector
    Attribute: Parameter z1 The z component of the first vector
    Attribute: Parameter x2 The x component of the second vector
    Attribute: Parameter y2 The y component of the second vector    
    Attribute: Parameter z2 The z component of the second vector

    Attribute: Returns The dot product of the two vectors.

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    number dotProduct = vector:DotProduct(3.0, 4.0, 5.0, 5.0, 6.0, 7.0)
    output "The dot product is " + dotProduct

    */
    action DotProduct(number x1, number y1, number z1, number x2, number y2, number z2) returns number
        return x1 * x2 + y1 * y2 + z1 * z2
    end

    /*
    This action computes the cross product between this vector and the passed
    vector. This changes the calling vector to the result of the cross product.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns The calling vector after taking the cross product

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(1.0, 0.0, 0.0)
    secondVector:Set(0.0, 1.0, 0.0)

    firstVector:CrossProduct(secondVector)
    
    number newX = firstVector:GetX()
    number newY = firstVector:GetY()
    number newZ = firstVector:GetZ()

    output "The cross product is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action CrossProduct(Vector3 vector) returns Vector3
        return Set(y * vector:GetZ() - z * vector:GetY(), z * vector:GetX() - x * vector:GetZ(), x * vector:GetY() - y * vector:GetX())
    end

    /*
    This action computes the cross product between the calling vector and the
    vector with the passed x, y, and z components. This changes the calling
    vector to the result of the cross product.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector

    Attribute: Returns The calling vector after taking the cross product

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1.0, 0.0, 0.0)
    
    vector:CrossProduct(0.0, 1.0, 0.0)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The cross product is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action CrossProduct(number xValue, number yValue, number zValue) returns Vector3
        return Set(y * zValue - z * yValue, z * xValue - x * zValue, x * yValue - y * xValue)
    end

    /*
    This action multiplies the vector by a 4-by-3 matrix and stores the result
    in the vector. This action is mainly used in graphics programming where the
    matrix is composed of a 3-by-3 matrix representing rotation and scale and a
    1-by-3 matrix representing translation.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The array representing the 4-by-3 matrix values

    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Containers.Array

    Vector3 vector
    vector:Set(3.0, 4.0, 2.0)

    Array<number> matrix
    matrix:Add(2.0)
    matrix:Add(0.0)
    matrix:Add(0.0)
    matrix:Add(0.0)
    matrix:Add(2.0)
    matrix:Add(0.0)
    matrix:Add(0.0)
    matrix:Add(0.0)
    matrix:Add(2.0)
    matrix:Add(1.0)
    matrix:Add(1.0)
    matrix:Add(1.0)

    vector:MultiplyBy4x3Matrix(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action MultiplyBy4x3Matrix(Array<number> matrix) returns Vector3
        return Set(x * matrix:Get(0) + y * matrix:Get(3) + z * matrix:Get(6) + matrix:Get(9),
                   x * matrix:Get(1) + y * matrix:Get(4) + z * matrix:Get(7) + matrix:Get(10),
                   x * matrix:Get(2) + y * matrix:Get(5) + z * matrix:Get(8) + matrix:Get(11))
    end

    /*
    This action multiplies the vector by a 4-by-4 matrix assuming the fourth
    w component of the vector is 1. This action is mainly used for game 
    graphics.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to multiply
    
    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array
    
    Vector3 vector
    Matrix4 matrix
    Array<number> values

    integer i = 0
    repeat 16 times
        array:Add(i)
        i = i + 1
    end

    matrix:Set(values)
    
    vector:Multiply(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Multiply(Matrix4 matrix) returns Vector3
        return Set(x * matrix:row0column0 + y * matrix:row0column1 + z * matrix:row0column2 + matrix:row0column3,
                   x * matrix:row1column0 + y * matrix:row1column1 + z * matrix:row1column2 + matrix:row1column3,
                   x * matrix:row2column0 + y * matrix:row2column1 + z * matrix:row2column2 + matrix:row2column3)    
    end
        
    /*
    This action multiplies the vector by the transpose of the passed 4-by-4 
    matrix assuming the fourth w component of the vector is 1. This action is 
    mainly used for game graphics.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to multiply
    
    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array
    
    Vector3 vector
    Matrix4 matrix
    Array<number> values

    integer i = 0
    repeat 16 times
        array:Add(i)
        i = i + 1
    end

    matrix:Set(values)
    
    vector:MultiplyByTranspose(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action MultiplyByTranspose(Matrix4 matrix) returns Vector3
        return Set(x * matrix:row0column0 + y * matrix:row1column0 + z * matrix:row2column0 + matrix:row3column0,
                   x * matrix:row0column1 + y * matrix:row1column1 + z * matrix:row2column1 + matrix:row3column1,
                   x * matrix:row0column2 + y * matrix:row1column2 + z * matrix:row2column2 + matrix:row3column2)
    end
 
    /*
    This action multiplies the vector by the passed 3-by-3 matrix and stores the
    result in the vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to multiply

    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix3
    use Libraries.Containers.Array

    Vector3 vector
    Matrix3 matrix

    vector:Set(2.0, 3.0, 5.0)

    Array<number> values
    
    integer i = 0
    repeat 9 times
        values:Add(i)
        i = i + 1
    end

    matrix:Set(values)

    vector:Multiply(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    
    */
    action Multiply(Matrix3 matrix) returns Vector3
        return Set(x * matrix:row0column0 + y * matrix:row0column1 + z * matrix:row0column2,
                   x * matrix:row1column0 + y * matrix:row1column1 + z * matrix:row1column2,
                   x * matrix:row2column0 + y * matrix:row2column1 + z * matrix:row2column2)
    end

    /*
    This action multiplies the vector by the transpose of the passed 3-by-3 
    matrix and stores the result in the vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The matrix to multiply

    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix3
    use Libraries.Containers.Array

    Vector3 vector
    Matrix3 matrix

    vector:Set(2.0, 3.0, 5.0)

    Array<number> values
    
    integer i = 0
    repeat 9 times
        values:Add(i)
        i = i + 1
    end

    matrix:Set(values)

    vector:MultiplyByTranspose(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    
    */
    action MultiplyByTranspose(Matrix3 matrix) returns Vector3
        return Set(x * matrix:row0column0 + y * matrix:row1column0 + z * matrix:row2column0,
                   x * matrix:row0column1 + y * matrix:row1column1 + z * matrix:row2column1,
                   x * matrix:row0column2 + y * matrix:row1column2 + z * matrix:row2column2)
    end

    /*
    This action multiplies the vector by the passed quaternion.

    Attribute: Author Amanda Austin

    Attribute: Parameter quaternion The Quaternion to multiply by
    
    Attribute: Returns The vector after multiplication

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Quaternion

    Vector3 vector
    Quaternion quaternion

    vector:Set(3.0, 4.0, 7.0)
    quaternion:Set(4.0, 3.0, 6.0, 6.0)

    vector:Multiply(quaternion)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    */
    action Multiply(Quaternion quaternion) returns Vector3
        return quaternion:Transform(me)
    end

    /*
    This action projects the vector via a perspective projection matrix. This
    is mainly useful for game graphics.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The perspective matrix
    
    Attribute: Returns The vector after projection

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array

    Vector3 vector
    Matrix4 matrix
    Array<number> values

    vector:Set(3.0, 4.0, 2.0)

    values:Set(matrix:M00, 2 * 3 / (100 - 0))
    values:Set(matrix:M01, 0)
    values:Set(matrix:M02, (100 + 0) / (100 - 0))
    values:Set(matrix:M03, 0)
    values:Set(matrix:M10, 0)
    values:Set(matrix:M11, 2 * 3 / (100 - 0))
    values:Set(matrix:M12, (100 + 0) / (100 - 0))
    values:Set(matrix:M13, 0)
    values:Set(matrix:M20, 0)
    values:Set(matrix:M21, 0)
    values:Set(matrix:M22, -1 * (10 + 3) / (10 - 3))
    values:Set(matrix:M23, -2 * 10 * 3 / (10 - 3))
    values:Set(matrix:M30, 0)
    values:Set(matrix:M31, 0)
    values:Set(matrix:M32, -1)
    values:Set(matrix:M33, 0)
    
    matrix:Set(values)

    vector:Project(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Project(Matrix4 matrix) returns Vector3
        number l_w = 1.0 / (x * matrix:row3column0 + y * matrix:row3column1 + z * matrix:row3column2 + matrix:row3column3)
        return me:Set((x * matrix:row0column0 + y * matrix:row0column1 + z * matrix:row0column2 + matrix:row0column3) * l_w,
                      (x * matrix:row1column0 + y * matrix:row1column1 + z * matrix:row1column2 + matrix:row1column3) * l_w,
                      (x * matrix:row2column0 + y * matrix:row2column1 + z * matrix:row2column2 + matrix:row2column3) * l_w)
    end
    
    /*
    This action multiplies the vector by the first three columns of the passed
    matrix, effectively applying rotation and scaling to the vector. This action
    is mainly used in game graphics.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The transformation matrix

    Attribute: Returns The vector after rotation

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array
    use Libraries.Compute.Math

    Math math

    Vector3 vector
    vector:Set(3, 2, 5)

    Matrix4 matrix
    
    Array<number> values
    values:SetSize(16)

    values:Set(matrix:M00, math:Cosine(math:pi / 4))
    values:Set(matrix:M01, -1 * math:Sine(math:pi / 4))
    values:Set(matrix:M02, 0)
    values:Set(matrix:M03, 1)
    values:Set(matrix:M10, math:Sine(math:pi / 4))
    values:Set(matrix:M11, math:Cosine(math:pi / 4))
    values:Set(matrix:M12, 0)
    values:Set(matrix:M13, 1)
    values:Set(matrix:M20, 0)
    values:Set(matrix:M21, 0)
    values:Set(matrix:M22, 1)
    values:Set(matrix:M23, 1)
    values:Set(matrix:M30, 1)
    values:Set(matrix:M31, 1)
    values:Set(matrix:M32, 1)
    values:Set(matrix:M33, 1)
    
    matrix:Set(values)

    vector:Rotate(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Rotate(Matrix4 matrix) returns Vector3
        return me:Set(x * matrix:row0column0 + y * matrix:row0column1 + z * matrix:row0column2,
                      x * matrix:row1column0 + y * matrix:row1column1 + z * matrix:row1column2,
                      x * matrix:row2column0 + y * matrix:row2column1 + z * matrix:row2column2)
    end

    /*
    This action multiplies the vector by the first three columns of the
    transpose of the passed matrix, effectively undoing any rotation and
    translation of the vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter matrix The transformation matrix

    Attribute: Returns The vector after unrotating

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array
    use Libraries.Compute.Math

    Math math

    Vector3 vector
    vector:Set(3, 2, 5)

    Matrix4 matrix
    
    Array<number> values
    values:SetSize(16)

    values:Set(matrix:M00, math:Cosine(math:pi / 4))
    values:Set(matrix:M01, -1 * math:Sine(math:pi / 4))
    values:Set(matrix:M02, 0)
    values:Set(matrix:M03, 1)
    values:Set(matrix:M10, math:Sine(math:pi / 4))
    values:Set(matrix:M11, math:Cosine(math:pi / 4))
    values:Set(matrix:M12, 0)
    values:Set(matrix:M13, 1)
    values:Set(matrix:M20, 0)
    values:Set(matrix:M21, 0)
    values:Set(matrix:M22, 1)
    values:Set(matrix:M23, 1)
    values:Set(matrix:M30, 1)
    values:Set(matrix:M31, 1)
    values:Set(matrix:M32, 1)
    values:Set(matrix:M33, 1)
    
    matrix:Set(values)

    vector:Rotate(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    vector:Unrotate(matrix)

    newX = vector:GetX()
    newY = vector:GetY()
    newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Unrotate(Matrix4 matrix) returns Vector3
        return me:Set(x * matrix:row0column0 + y * matrix:row1column0 + z * matrix:row2column0,
                      x * matrix:row0column1 + y * matrix:row1column1 + z * matrix:row2column1,
                      x * matrix:row0column2 + y * matrix:row1column2 + z * matrix:row2column2)
    end

    /*
    This action translates the vector in the direction opposite from the
    translation of the matrix and then multiplies the vector by the first three
    columns of the matrix. This undoes the translations and rotations applied
    to the vector.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter matrix The transformation matrix

    Attribute: Returns The vector after untransforming

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Matrix4
    use Libraries.Containers.Array

    Vector3 vector
    Matrix4 matrix
    Array<number> values

    vector:Set(3.0, 4.0, 2.0)

    values:Set(matrix:M00, 2 * 3 / (100 - 0))
    values:Set(matrix:M01, 0)
    values:Set(matrix:M02, (100 + 0) / (100 - 0))
    values:Set(matrix:M03, 0)
    values:Set(matrix:M10, 0)
    values:Set(matrix:M11, 2 * 3 / (100 - 0))
    values:Set(matrix:M12, (100 + 0) / (100 - 0))
    values:Set(matrix:M13, 0)
    values:Set(matrix:M20, 0)
    values:Set(matrix:M21, 0)
    values:Set(matrix:M22, -1 * (10 + 3) / (10 - 3))
    values:Set(matrix:M23, -2 * 10 * 3 / (10 - 3))
    values:Set(matrix:M30, 0)
    values:Set(matrix:M31, 0)
    values:Set(matrix:M32, -1)
    values:Set(matrix:M33, 0)
    
    matrix:Set(values)

    vector:Project(matrix)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Untransform(Matrix4 matrix) returns Vector3
        x = x - matrix:row0column3
        y = y - matrix:row0column3
        z = z - matrix:row0column3
        return me:Set(x * matrix:row0column0 + y * matrix:row1column0 + z * matrix:row2column0,
                      x * matrix:row0column1 + y * matrix:row1column1 + z * matrix:row2column1,
                      x * matrix:row0column2 + y * matrix:row1column2 + z * matrix:row2column2)
    end

    /*
    This action rotates the vector the given number of degrees around the axis
    with the passed x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter degrees The rotation angle in degrees
    Attribute: Parameter axisX The x component of the axis to rotate around
    Attribute: Parameter axisY The y component of the axis to rotate around
    Attribute: Parameter axisZ The z component of the axis to rotate around

    Attribute: Returns The vector after rotation

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(3.0, 2.0, 5.0)
    
    vector:Rotate(45, 1, 0, 0)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Rotate(number degrees, number axisX, number axisY, number axisZ) returns Vector3
        Matrix4 tempMat
        return me:Multiply(tempMat:SetToRotation(axisX, axisY, axisZ, degrees))
    end

    /*
    This action rotates the vector the given number of radians around the axis
    with the passed x, y, and z components.

    Attribute: Author Amanda Austin

    Attribute: Parameter radians The rotation angle in radians
    Attribute: Parameter axisX The x component of the axis to rotate around
    Attribute: Parameter axisY The y component of the axis to rotate around
    Attribute: Parameter axisZ The z component of the axis to rotate around

    Attribute: Returns The vector after rotation

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Math
    
    Math math

    Vector3 vector
    vector:Set(3.0, 2.0, 5.0)
    
    vector:RotateRadians(math:pi / 4, 1, 0, 0)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action RotateRadians(number radians, number axisX, number axisY, number axisZ) returns Vector3
        Matrix4 tempMat
        return me:Multiply(tempMat:SetToRotationRadians(axisX, axisY, axisZ, radians))
    end

    /*
    This action rotates the vector the given number of degrees around the passed
    axis.

    Attribute: Author Amanda Austin

    Attribute: Parameter axis The rotation axis
    Attribute: Parameter degrees The rotation angle in degrees

    Attribute: Returns The vector after rotation

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 vector
    Vector3 axis

    vector:Set(3.0, 2.0, 5.0)
    axis:Set(1.0, 0.0, 0.0)
    
    vector:Rotate(axis, 45)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Rotate(Vector3 axis, number degrees) returns Vector3
        Matrix4 tempMat
        tempMat:SetToRotation(axis, degrees)
        return me:Multiply(tempMat)
    end

    /*
    This action rotates the vector the given number of radians around the passed
    axis.

    Attribute: Author Amanda Austin

    Attribute: Parameter axis The rotation axis
    Attribute: Parameter radians The rotation angle in radians

    Attribute: Returns The vector after rotation

    Attribute: Example

    use Libraries.Compute.Vector3
    use Libraries.Compute.Math

    Math math
    
    Vector3 vector
    Vector3 axis

    vector:Set(3.0, 2.0, 5.0)
    axis:Set(1.0, 0.0, 0.0)
    
    vector:RotateRadians(axis, math:pi / 4)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action RotateRadians(Vector3 axis, number radians) returns Vector3
        Matrix4 tempMat
        tempMat:SetToRotationRadians(axis, radians)
        return me:Multiply(tempMat)
    end


    /*
    This action determines whether the vector is a unit vector, meaning it has
    a length of 1.

    Attribute: Author Amanda Austin

    Attribute: Returns true if the vector is a unit vector, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(0.0, 1.0, 0.0)

    boolean isUnit = vector:IsUnit()
    
    if isUnit
        output "The vector is a unit vector."
    else
        output "The vector is not a unit vector."
    end

    */
    action IsUnit returns boolean
        return IsUnit(0.000000001)
    end

    /*
    This action determines whether the vector is a unit vector, meaning it has
    a length of 1 to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vector is a unit vector to within the passed precision, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(0.0, 1.0, 0.0)

    boolean isUnit = vector:IsUnit(0.00001)
    
    if isUnit
        output "The vector is a unit vector."
    else
        output "The vector is not a unit vector."
    end

    */
    action IsUnit(number precision) returns boolean
        return math:AbsoluteValue(LengthSquared() - 1.0) < precision
    end

    /*
    This action determines whether the vector is the zero vector, meaning that
    its x, y, and z components are 0.

    Attribute: Author Amanda Austin

    Attribute: Returns true if the vector is the zero vector, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(5.0, 6.0, 7.0)
    secondVector:Set(5.0, 6.0, 7.0)

    firstVector:Subtract(secondVector)
    
    boolean isZero = firstVector:IsZero()

    if isZero
        output "The vector is the zero vector."
    else
        output "The vector is not the zero vector."
    end

    */
    action IsZero returns boolean
        return x = 0 and y = 0 and z = 0
    end

    /*
    This action determines whether the vector is the zero vector to within the
    passed precision, meaning that its x, y, and z components are 0.

    Attribute: Author Amanda Austin

    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vector is the zero vector to within the passed precision, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(5.0, 6.0, 7.0)
    secondVector:Set(5.0, 6.0, 7.0)

    firstVector:Subtract(secondVector)
    
    boolean isZero = firstVector:IsZero(0.00001)

    if isZero
        output "The vector is the zero vector."
    else
        output "The vector is not the zero vector."
    end

    */
    action IsZero(number precision) returns boolean
        return LengthSquared() < precision
    end

    /*
    This action determines whether the passed vector is on the same line as the
    calling vector to within the passed precision, either in the same or
    opposite direction

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are on the same line, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(1.0, 2.0, 3.0)
    secondVector:Set(-2.0, -4.0, -6.0)

    boolean onLine = firstVector:IsOnLine(secondVector, 0.00001)
    
    if onLine
        output "The two vectors are on the same line."
    else
        output "The two vectors are not on the same line."
    end

    */
    action IsOnLine(Vector3 other, number precision) returns boolean
        return LengthSquared(y * other:GetZ() - z * other:GetY(), z * other:GetX() - x * other:GetZ(),
                             x * other:GetY() - y * other:GetX()) <= precision
    end

    /*
    This action determines whether the passed vector is on the same line as the
    calling vector, either in the same or opposite direction.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are on the same line, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(1.0, 2.0, 3.0)
    secondVector:Set(-2.0, -4.0, -6.0)

    boolean onLine = firstVector:IsOnLine(secondVector)
    
    if onLine
        output "The two vectors are on the same line."
    else
        output "The two vectors are not on the same line."
    end

    */
    action IsOnLine(Vector3 other) returns boolean
        return LengthSquared(y * other:GetZ() - z * other:GetY(), z * other:GetX() - x * other:GetZ(), 
                             x * other:GetY() - y * other:GetX()) <= ROUNDING_MARGIN
    end
        
    /*
    This action determines whether the passed vector is collinear in the
    opposite direction with the calling vector, meaning that it lies on the same
    line as the calling vector and has the opposite direction as the calling
    vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are collinear in the opposite directions, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-6.0, -8.0, -10.0)

    boolean collinearOpposite = firstVector:IsCollinearOpposite(secondVector, 0.00001)

    if collinearOpposite
        output "The two vectors are collinear in the opposite direction"
    else
        output "The two vectors are not collinear in the opposite direction"
    end

    */
    action IsCollinearOpposite(Vector3 other, number precision) returns boolean
        return IsOnLine(other, precision) and HasOppositeDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear in the
    opposite direction with the calling vector, meaning that it lies on the same
    line as the calling vector and has the opposite direction as the calling
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are collinear in the opposite directions, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-6.0, -8.0, -10.0)

    boolean collinearOpposite = firstVector:IsCollinearOpposite(secondVector)

    if collinearOpposite
        output "The two vectors are collinear in the opposite direction"
    else
        output "The two vectors are not collinear in the opposite direction"
    end

    */
    action IsCollinearOpposite(Vector3 other) returns boolean
        return IsOnLine(other) and HasOppositeDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear with the
    calling vector, meaning that it lies on the same line as the calling vector 
    and has the same direction as the calling vector to within the passed 
    precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are collinear, false otherwise.

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean collinear = firstVector:IsCollinear(secondVector, 0.00001)

    if collinear
        output "The two vectors are collinear in the same direction"
    else
        output "The two vectors are not collinear in the same direction"
    end

    */
    action IsCollinear(Vector3 other, number precision) returns boolean
        return IsOnLine(other, precision) and HasSameDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear with the
    calling vector, meaning that it lies on the same line as the calling vector 
    and has the same direction as the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are collinear, false otherwise.

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean collinear = firstVector:IsCollinear(secondVector)

    if collinear
        output "The two vectors are collinear in the same direction"
    else
        output "The two vectors are not collinear in the same direction"
    end

    */
    action IsCollinear(Vector3 other) returns boolean
        return IsOnLine(other) and HasSameDirection(other)
    end

    /*
    This action determines whether the passed vector is perpendicular to the
    calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors are perpendicular, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(1.0, 0.0, 0.0)
    secondVector:Set(0.0, 1.0, 0.0)
    
    boolean isPerpendicular = firstVector:IsPerpendicular(secondVector)
    
    if isPerpendicular
        output "The two vectors are perpendicular."
    else
        output "The two vectors are not perpendicular."
    end

    */
    action IsPerpendicular(Vector3 vector) returns boolean
        return math:AbsoluteValue(DotProduct(vector)) <= ROUNDING_MARGIN
    end

    /*
    This action determines whether the passed vector is perpendicular to the
    calling vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    Attribute: Parameter precision The desired precision
    
    Attribute: Returns true if the two vectors are perpendicular, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(1.0, 0.0, 0.0)
    secondVector:Set(0.0, 1.0, 0.0)
    
    boolean isPerpendicular = firstVector:IsPerpendicular(secondVector, 0.00001)
    
    if isPerpendicular
        output "The two vectors are perpendicular."
    else
        output "The two vectors are not perpendicular."
    end

    */
    action IsPerpendicular(Vector3 vector, number precision) returns boolean
        return math:AbsoluteValue(DotProduct(vector)) <= precision
    end

    /*
    This action determines whether the passed vector has the same direction as
    the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors have the same direction, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean isSame = firstVector:HasSameDirection(secondVector)

    if isSame
        output "The two vectors have the same direction."
    else
        output "The two vectors do not have the same direction."
    end

    */
    action HasSameDirection(Vector3 vector) returns boolean
        return DotProduct(vector) > 0
    end

    /*
    This action determines whether the passed vector has the opposite direction
    as the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors have the opposite direction, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-3.0, -4.0, -5.0)
    
    boolean isOpposite = firstVector:HasOppositeDirection(secondVector)

    if isOpposite
       output "The two vectors have opposite directions." 
    else
       output "The two vectors do not have opposite directions."
    end

    */
    action HasOppositeDirection(Vector3 vector) returns boolean
        return DotProduct(vector) < 0
    end

    /*
    This action performs a linear interpolation between the calling vector and 
    the passed target vector by alpha, which is between 0 and 1, inclusive. 
    This changes the calling vector to the result of the linear interpolation.

    Attribute: Author Amanda Austin

    Attribute: Parameter target The target vector
    Attribute: Parameter alpha The alpha value

    Attribute: Returns The calling vector after linear interpolation

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    Vector3 target

    vector:Set(1.0, 2.0, 1.0)
    target:Set(2.0, 3.0, 1.0)
    number alpha = 0.5

    vector:LinearInterpolation(target, alpha)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action LinearInterpolation(Vector3 target, number alpha) returns Vector3
        x = x + alpha * (target:GetX() - x)
        y = y + alpha * (target:GetY() - y)
        z = z + alpha * (target:GetZ() - z)
        return me
    end

    /*
    This action performs a spherical interpolation between the calling
    vector and the passed target vector by alpha, which is between 0 and 1,
    inclusive. This changes the calling vector to the result of the spherical
    linear interpolation.

    Attribute: Author Amanda Austin

    Attribute: Parameter target The target vector
    Attribute: Parameter alpha The alpha value

    Attribute: Returns The calling vector after spherical linear interpolation

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    Vector3 target

    vector:Set(0.4, 0.3, 0.2)
    target:Set(0.1, 0.2, 0.3)
    alpha = 0.5

    vector:SphericalLinearInterpolation(target, alpha)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action SphericalLinearInterpolation(Vector3 target, number alpha) returns Vector3
        constant number dotProduct = DotProduct(target)

        if dotProduct > 0.9995 or dotProduct < -0.9995
            return LinearInterpolation(target, alpha)
        end

        constant number theta0 = math:InverseCosine(dotProduct)
        constant number theta = theta0 * alpha

        constant number st = math:Sine(theta)
        constant number tx = target:GetX() - x * dotProduct
        constant number ty = target:GetY() - y * dotProduct
        constant number tz = target:GetZ() - z * dotProduct
        constant number l2 = tx * tx + ty * ty + tz * tz
        number dl = 0

        if l2 < 0.0001
            dl = st * 1.0
        else
            dl = st * (1.0 / math:SquareRoot(l2))
        end

        return Scale(math:Cosine(theta)):Add(tx * dl, ty * dl, tz * dl):Normalize()
    end

    /*
    This action limits the length of the vector to the passed limit value. This
    changes the calling vector to have a new length if its old length was
    greater than the passed limit.

    Attribute: Author Amanda Austin

    Attribute: Parameter limit The value to limit the length to

    Attribute: Returns The vector with a new length if its old length was larger than the passed limit

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    vector:Limit(1.5)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Limit(number limit) returns Vector3
        return LimitSquared(limit * limit)
    end

    /*
    This action limits the square of the length of the vector to the passed
    value, which represents the square of the value to limit the length of the
    vector to. This changes the calling vector to have a new length if the
    old length squared was greater than the limit squared.

    Attribute: Author Amanda Austin

    Attribute: Parameter limitSquared the square of the limit

    Attribute: Returns the calling vector with a new length if the old length squared was greater than the limit squared
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    vector:LimitSquared(2.25)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action LimitSquared(number limitSquared) returns Vector3
        number lengthSquared = LengthSquared()
        if lengthSquared > limitSquared
            Scale(math:SquareRoot(limitSquared / lengthSquared))
        end
        
        return me
    end

    /*
    This action clamps the length of the vector to be between the passed minimum
    and maximum values. This changes the vector if the length of the vector is
    greater than the maximum or less than the minimum.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter min The minimum length
    Attribute: Parameter max The maximum length

    Attribute: Returns The vector with a new length if the old length was below the minimum or above the maximum

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    vector:Clamp(0.5, 1.5)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Clamp(number min, number max) returns Vector3
        number len2 = LengthSquared()
        if len2 = 0.0
            return me
        end
        
        number max2 = max * max
        if len2 > max2
            return Scale(math:SquareRoot(max2 / len2))
        end

        number min2 = min * min
        if len2 < min2
            return Scale(math:SquareRoot(min2 / len2))
        end

        return me
    end

    /*
    This action determines whether the passed vector equals the calling vector
    to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are equal within the passed precision, false otherwise
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)
    secondVector:Scale(0.5)

    boolean areEqual = firstVector:EqualsAtPrecision(secondVector, 0.00001)
    
    if areEqual
        output "The two vectors are equal."
    else
        output "The two vectors are not equal."
    end

    */
    action EqualsAtPrecision(Vector3 other, number epsilon) returns boolean
        if other = undefined
            return false
        end
        if math:AbsoluteValue(other:GetX() - x) > epsilon
            return false
        end
        if math:AbsoluteValue(other:GetY() - y) > epsilon
            return false
        end
        if math:AbsoluteValue(other:GetZ() - z) > epsilon
            return false
        end
        return true
    end

    /*
    This action determines whether the vector represented by the passed x, y,
    and z components equals the calling vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are equal within the passed precision, false otherwise
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector

    vector:Set(3.0, 4.0, 7.5)
    
    boolean areEqual = vector:EqualsAtPrecision(3.0, 4.0000001, 7.5000002, 0.00001)
    
    if areEqual
        output "The two vectors are equal."
    else
        output "The two vectors are not equal."
    end

    */
    action EqualsAtPrecision(number xVal, number yVal, number zVal, number precision) returns boolean  
        if math:AbsoluteValue(xVal - x) > precision
            return false
        end
        if math:AbsoluteValue(yVal - y) > precision
            return false
        end
        if math:AbsoluteValue(zVal - z) > precision
            return false
        end
        return true
    end

    /*
    This action sets the vector to the zero vector, meaning the x, y, and z
    components will be set to 0.

    Attribute: Author Amanda Austin

    Attribute: Returns The calling vector set to the zero vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:SetZero()
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action SetZero returns Vector3
        x = 0
        y = 0
        z = 0
        return me
    end

end