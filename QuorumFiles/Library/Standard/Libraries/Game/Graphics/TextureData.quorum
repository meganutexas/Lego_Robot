// The TextureData class is primarily composed of blueprints. Classes which
// implement it will store pixel information and its data type, allowing for
// PixelMaps to be consumed.

package Libraries.Game.Graphics

/*
This class is used to store information about a data. This class is for internal
use by the game engine, and most users will never need to interact with this
class directly.
*/
class TextureData 

        // This action replaces the "GetDataType" function from libGDX's
        // graphics system, as the only types possible are Pixmap or Custom.
        /*
        Determines if the TextureData is a default type. If so, this returns true.
        */
        blueprint action IsCustomData returns boolean

	/*
        This action returns whether the TextureData has been prepared yet.
        */
        blueprint action IsPrepared returns boolean

        /*
        This action prepares the TextureData for use by OpenGL.
        */
        blueprint action Prepare

        /*
        Returns the PixelMap stored by this TextureData. The TextureData must
        be set up using Prepare() before calling this action.
        */
        blueprint action ConsumePixelMap returns PixelMap

        /*
        Returns whether or not the caller of ConsumePixelMap should also dispose
        of it.
        */
        blueprint action DisposePixelMap returns boolean

	/** Uploads the pixel data to the OpenGL ES texture. The caller must bind an OpenGL ES texture. A call to {@link #prepare()}
	 * must preceed a call to this method. Any internal data structures created in {@link #prepare()} should be disposed of here.
         
        This feature is not needed for initial implementation.

        blueprint action ConsumeCustomeData(integer target)
        */

	/*
        Returns the width of the stored PixelMap data.
        */
        blueprint action GetWidth returns integer

	/*
        Returns the height of the stored PixelMap data.
        */
        blueprint action GetHeight returns integer

	/*
        Returns the Format of the stored PixelMap data.
        */
        blueprint action GetFormat returns Format

        /*
        Returns whether or not the TextureData should be additionally used to
        generate mip maps.
        */
        blueprint action UseMipMaps returns boolean

	/*
        Returns whether or not the TextureData can handle a loss of OpenGL
        context automatically.
        */
        blueprint action IsManaged returns boolean

	/** Provides static method to instantiate the right implementation (Pixmap, ETC1, KTX).
	 * @author Vincent Bousquet
         // Because Quorum does not have static functions, and there are few
         // places this would be used, this will instead be implemented in the
         // classes that need to make a TextureData of an appropriate type.
	public static class Factory {

		public static TextureData loadFromFile (FileHandle file, boolean useMipMaps) {
			return loadFromFile(file, null, useMipMaps);
		}

		public static TextureData loadFromFile (FileHandle file, Format format, boolean useMipMaps) {
			if (file == null) return null;
			if (file.name().endsWith(".cim")) return new FileTextureData(file, PixmapIO.readCIM(file), format, useMipMaps);
			if (file.name().endsWith(".etc1")) return new ETC1TextureData(file, useMipMaps);
			if (file.name().endsWith(".ktx") || file.name().endsWith(".zktx")) return new KTXTextureData(file, useMipMaps);
			return new FileTextureData(file, new Pixmap(file), format, useMipMaps);
		}

    */

end