package Libraries.Game.Graphics

/*
The Painter2D class is used to draw Drawable objects on the screen. The Game class
provides a default Painter2D, which is passed to Items and Drawables via their
Draw action. It is highly recommended to use that Painter2D when using the Game
class. 

Note that when using the Game class, in most cases it is not necessary to ever 
use the Painter2D class manually, as the Game class will automatically draw
Drawables that have been added to it.

Attribute: Example

    use Libraries.Game.Graphics.Painter2D
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Game

    class Main is Game

        Painter2D myPainter = undefined
        Drawable square

        action Main
            StartGame()
        end

        action CreateGame
            Color white
            white:SetColor(1, 1, 1, 1)
        
            square:LoadFilledRectangle(200, 200, white)

            myPainter = parent:Game:batch
            Color red
            red:SetColor(1, 0, 0, 1)
            myPainter:SetColor(red)

            Add(square)
        end

    end
*/
class Painter2D 
    
    Texture lastTexture = undefined

    private boolean drawing = false

    private Color color

    on create
        color = color:White()
        SetColor(color)
        LoadDefaultPainter()
    end

    /*
    This action will set a color filter on the painter, causing all Drawables
    drawn by this painter to be tinted with the given color. 

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                Color white
                white:SetColor(1, 1, 1, 1)

                square:LoadFilledRectangle(200, 200, white)

                myPainter = parent:Game:batch
                Color red
                red:SetColor(1, 0, 0, 1)
                myPainter:SetColor(red)

                Add(square)
            end

        end
    */
    system action SetColor(Color newColor)

    /*
    This action will set a color filter on the painter, causing all Drawables
    drawn by this painter to be tinted with the given color. The color is set by
    using four component values between 0 and 1, which represent red, green,
    blue, and alpha, in that order.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                Color white
                white:SetColor(1, 1, 1, 1)

                square:LoadFilledRectangle(200, 200, white)

                myPainter = parent:Game:batch
                myPainter:SetColor(1, 0, 0, 1)

                Add(square)
            end

        end
    */
    system action SetColor(number red, number green, number blue, number alpha)

    /*
    This action returns the current color filter on the Painter2D. The default
    color filter is white.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Color color

            action Main
                StartGame()
            end

            action CreateGame

                myPainter = parent:Game:batch
                color = myPainter:GetColor()
            end

        end
    */
    action GetColor returns Color
        return color
    end

    /*
    This action returns whether the Painter2D is currently active for drawing. A
    Painter2D becomes active for drawing after calling Painter2D:Begin(), and stays
    active until Painter2D:End() is called.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                output "Is Painter2D drawing? " + myPainter:IsDrawing()
                myPainter:End()
            end

        end
    */
    action IsDrawing returns boolean
            return drawing
    end

    /*
    This action returns whether the Painter2D is currently set to use blending in
    OpenGL for the pictures that are being drawn.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined
            Drawable square

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                output "Is Painter2D blending? " + myPainter:IsBlendingEnabled()
            end

        end
    */
    system action IsBlendingEnabled returns boolean

    /*
    Initializes the Painter2D with default settings. The Painter2D can not be used
    until it is initialized with this action. Note that the default Painter2D
    provided by the Game class will already be loaded with this action, so you
    never have to call this action on that Painter2D.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myNewPainter

            action Main
                StartGame()
            end

            action CreateGame
                myNewPainter:LoadDefaultPainter()
            end

        end
    */
    system action LoadDefaultPainter

    /*
    Activates this Painter2D so it may draw items. If the Painter2D is already
    active, this will cause an error.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                myPainter:End()
            end

        end
    */
    system action Begin

    /*
    Deactivates this Painter2D. A deactivated Painter2D can not draw. If the Painter2D
    is already deactived, this will cause an error.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            Painter2D myPainter = undefined

            action Main
                StartGame()
            end

            action CreateGame
                myPainter = parent:Game:batch
                myPainter:Begin()
                myPainter:End()
            end

        end
    */
    system action End

    /*
    Draws a Drawable on the screen. A Painter2D must be activated with Begin()
    before it can draw. When using this in the game engine, this should be used
    inside the Draw action of a class inheriting from Item. If it is drawn as
    part of the normal update process, the image will draw, then immediately be
    covered over by the Game's drawing step, keeping the drawn object from being
    seen.
    */
    system action Draw(Drawable drawable)

    /*
    This call will draw the Drawable on the screen, offsetting it by the
    two number parameters given. If forceUpdate is true, then the vertices
    will be updated regardless of the "dirty" status of the Drawable. 
    */
    system action Draw(Drawable drawable, number globalOffsetX, number globalOffsetY, boolean forceUpdate)

    /* 
    This action will draw a TextureRegion, drawing it at the given screen
    screen coordinates.
    */
    system action Draw(TextureRegion drawRegion, number drawX, number drawY)

    /*
    Disposes of the plugin data stored by the Painter2D, freeing up resources when
    the Painter2D is no longer needed. This should never be called on the default
    Painter2D provided by the Game class.

    Attribute: Example

        use Libraries.Game.Graphics.Painter2D
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Painter2D myNewPainter
                myNewPainter:LoadDefaultPainter()
                myNewPainter:Dispose()
            end

        end
    */
    system action Dispose

    /*
    This action forces the Painter2D to immediately draw all images it has stored
    inside of it that are awaiting processing.
    */
    system action Flush

    /*
    This action will set the Painter2D to render objects on the screen relative
    to the given camera.
    */
    system action ApplyCamera(Camera camera)

end