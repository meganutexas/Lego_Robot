package Libraries.Game.Graphics

use Libraries.Game.Graphics.FileTextureData
use Libraries.Containers.Array
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.PixelMap
use Libraries.System.File
use Libraries.Language.Errors.Error
use Libraries.Game.Disposable
use Libraries.Game.GameStateManager

/*
The Texture class represents an image that can be drawn on the screen. Once
an image is loaded into a texture, it can be drawn on the screen by loading
it into a Drawable.

Attribute: Example

    use Libraries.Game.Graphics.Texture
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Game

    class Main is Game

        Drawable drawable
        Texture texture
        Color red

        action Main
            StartGame()
        end

        action CreateGame
            red:SetColor(1, 0, 0, 1)
            texture:LoadFilledRectangle(80, 100, red)
            drawable:Load(texture)

            drawable:SetPosition(200, 200)
            Add(drawable)
        end
    end
*/
class Texture is Disposable

    private TextureData data = undefined

    private GraphicsManager gl20 = undefined

    TextureFilter minimizeFilter
    TextureFilter magnifyFilter
    TextureWrap horizontalWrap
    TextureWrap verticalWrap

    on create
        GameStateManager manager
        gl20 = manager:GetGameGraphics()

        minimizeFilter:ConstructTextureFilter(minimizeFilter:NEAREST)
        magnifyFilter:ConstructTextureFilter(magnifyFilter:NEAREST)
        horizontalWrap:ConstructTextureWrap(horizontalWrap:CLAMP_TO_EDGE)
        verticalWrap:ConstructTextureWrap(verticalWrap:CLAMP_TO_EDGE)
    end

    system action GetDepth() returns integer

    /*
    This action loads a Texture from a file path given as text. The file path
    should be given relative to the directory where the program is executed from. 

    Attribute: Parameter filePath A file path pointing to the image file to load into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
            end
        end
    */
    action LoadFromFile(text filePath)
        File file
        file:SetPath(filePath)
        LoadFromFile(file)
    end

    /*
    This action loads a Texture from a Quorum File. The File must already
    have its path set for this function.

    Attribute: Parameter file An image file to be loaded into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadFromFile(myFile)
            end
        end
    */
    action LoadFromFile(File file)
        LoadFromFile(file, undefined, false)
    end

    /*
    This action loads a Texture from a Quorum File, storing it as the given
    Format type and optionally using it to create mip maps, if the boolean
    is true. The File must already have its path set for this function.

    Attribute: Parameter file An image file to be loaded into a Texture.

    Attribute: Example
    
        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadFromFile(myFile, undefined, false)
            end
        end
    */
    action LoadFromFile(File file, Format format, boolean useMipMaps)
        LoadFromTextureData(CreateTextureData(file, format, useMipMaps))
    end

    /*
    This action loads a Texture from a file path given as text. The file path
    should be given relative to the directory where the program is executed from.
    When loaded via this command, the Texture will be set to use linear filtering
    and repeated texture wrapping, which is typically preferred for 3D models.

    Attribute: Parameter fileName A file path pointing to the image file to load into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadModelTexture("Images/Sample.png")
            end
        end
    */
    action LoadModelTexture(text fileName)
        File tempFile
        text filePath = fileName:Replace(tempFile:GetWorkingDirectory(), "")
        LoadFromFile(filePath)

        TextureFilter minFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        TextureFilter magFilter
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        SetFilter(minFilter, magFilter)

        TextureWrap uWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        TextureWrap vWrap
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        SetWrap(uWrap, vWrap)
    end

    /*
    This action loads a Texture from a Quorum File. The File must already
    have its path set for this function. When loaded via this command, the
    Texture will be set to use linear filtering and repeated texture wrapping,
    which is typically preferred for 3D models.

    Attribute: Parameter file An image file to be loaded into a Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game
        use Libraries.System.File

        class Main is Game

            File myFile
            Texture myTexture

            action Main
                StartGame()
            end

            action CreateGame
                myFile:SetPath("Images/Sample.png")

                // This call will load the image that the "myFile" variable points to.
                // The file points to an image called "Sample.png" in a folder called "Images".
                myTexture:LoadModelTexture(myFile)
            end
        end
    */
    action LoadModelTexture(File file)
        LoadFromFile(file)

        TextureFilter minFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        TextureFilter magFilter
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        SetFilter(minFilter, magFilter)

        TextureWrap uWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        TextureWrap vWrap
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        SetWrap(uWrap, vWrap)
    end

    /*
    This action loads a Texture from TextureData. This is primarily for internal
    use, and most users will never need to use this action. 
    */
    private action LoadFromTextureData(TextureData data)
        SetGL20Info(gl20:GL_TEXTURE_2D, CreateGLHandle())
        Load(data)
        AddManagedTexture()
    end

    /*
    This action loads a Texture's data so it can be drawn to the screen. This is
    primarily for internal use, and most users will never need to use this action. 
    */
    private action Load(TextureData loadingData)
        if data not= undefined
            if loadingData:IsManaged() not= data:IsManaged()
                Error error
                error:SetErrorMessage("Newly loaded data must have the same type of data management as the old data.")
                alert(error)
            end
        end

        data = loadingData

        if data:IsPrepared() not= true
            data:Prepare()
        end

        Bind()

        UploadImageData(gl20:GL_TEXTURE_2D, data)
        SetFilter(GetMinimizeFilter(), GetMagnifyFilter())
        SetWrap(GetHorizontalWrap(), GetVerticalWrap())
        
        BindToDefault()

        //parent:Item:width = data:GetWidth()
        //parent:Item:height = data:GetHeight()

    end

    /*
    This action returns the width of a loaded Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
                number width = myTexture:GetWidth()
            end
        end
    */
    action GetWidth returns integer
        if data not= undefined
            return data:GetWidth()
        end
        return 0
    end

    /*
    This action returns the height of a loaded Texture.

    Attribute: Example

        use Libraries.Game.Texture
        use Libraries.Game.Game

        class Main is Game

            Texture myTexture

            action Main
                StartGame()
            end
        
            action CreateGame
                // This call will load an image "Sample.png" from a directory called "Images".
                myTexture:LoadFromFile("Images/Sample.png")
                number width = myTexture:GetHeight()
            end
        end
    */
    action GetHeight returns integer
        if data not= undefined
            return data:GetHeight()
        end
        return 0
    end

    // This currently takes no parameters, unlike in libGDX. This may have to
    // change, but for now it should suffice.
    private system action AddManagedTexture

/*
                Array<Texture> managedTextureArray = managedTextures.get(app);
		if (managedTextureArray == null) managedTextureArray = new Array<Texture>();
		managedTextureArray.add(texture);
		managedTextures.put(app, managedTextureArray);
*/

    /*
    This action activates this texture and binds the texture image to the
    internal texture ID. This is for internal use.
    */
    private system action Bind

    private system action BindToDefault

    private system action CreateGLHandle returns integer

    private system action SetGL20Info(integer target, integer handle)

    private system action GetGLTarget returns integer

    private system action GetGLHandle returns integer

    // All actions placed below are originally from GLTexture.

    private action CreateTextureData(File file, boolean useMipMaps) returns TextureData
        return CreateTextureData(file, undefined, useMipMaps)
    end

    private action CreateTextureData(File file, Format format, boolean useMipMaps) returns TextureData
        if file = undefined
            return undefined
        end
        
        text filePath = file:GetPath()

        if filePath:EndsWith(".cim") 
            //return new FileTextureData(file, PixmapIO.readCIM(file), format, useMipMaps);
        elseif filePath:EndsWith(".etc1") 
            //return new ETC1TextureData(file, useMipMaps);
        elseif filePath:EndsWith(".ktx") 
            //return new KTXTextureData(file, useMipMaps);
        end

        FileTextureData data
        PixelMap temp
        temp:LoadPixelMap(file)
        data:InitializeFileTextureData(file, temp, format, useMipMaps)
        return data
    end

    private action UploadImageData(integer target, TextureData data)
        UploadImageData(target, data, 0)
    end

    private action UploadImageData(integer target, TextureData data, integer mipLevel)

        if data = undefined
            Error error
            error:SetErrorMessage("Can not upload undefined image data!")
            alert(error)
        end

        if data:IsPrepared() not= true
            data:Prepare()
        end


        // If custom data types are allowed in the future, they will have to
        // be handled here. Otherwise, we use the standard.

        PixelMap pixelMap = data:ConsumePixelMap()
        boolean disposePixelMap = data:DisposePixelMap()

        Format pixelFormat = pixelMap:GetFormat()
        Format dataFormat = data:GetFormat()

        if pixelFormat:GetValue() not= dataFormat:GetValue()
            /*      Need to determine if this is really needed. In the meantime,
                    this will throw an error (to help determine when this would
                    occur during execution).

                    Pixmap tmp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), data.getFormat());
                    Blending blend = Pixmap.getBlending();
                    Pixmap.setBlending(Blending.None);
                    tmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
                    Pixmap.setBlending(blend);
                    if (data.disposePixmap()) {
                            pixmap.dispose();
                    }
                    pixmap = tmp;
                    disposePixmap = true;
            */
            output "PixMap: " + pixelFormat:GetValue() + ", data: " + dataFormat:GetValue()
            Error error
            error:SetErrorMessage("PixelMap format and data format mismatch!")
            alert(error)
        end

        gl20:PixelStorageMode(gl20:GL_UNPACK_ALIGNMENT,1)

        if data:UseMipMaps()
            // Generate MipMaps - only used for 3D textures. Java code below.
            // MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight());
        else
            pixelMap:Define2DImage(target, mipLevel, 0)
        end

        if disposePixelMap = true
            pixelMap:Dispose()
        end

    end

    /*
    Sets the minimization filter and magnification filter, respectively, used
    for this Texture. See Libraries.Game.Graphics.TextureFilter for details on
    what the different filters do.
    */
    action SetFilter(TextureFilter minFilter, TextureFilter magFilter)
        
        minimizeFilter = minFilter
        magnifyFilter = magFilter
        Bind()
        gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_MIN_FILTER, minFilter:GetValue())
        gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_MAG_FILTER, magFilter:GetValue())

    end

    /*
    Sets the horizontal and vertical texture wrapping modes, respectively, used
    for this Texture. See Libraries.Game.Graphics.TextureWrap for details on
    what the different texture wrapping modes do.
    */
    action SetWrap(TextureWrap hWrap, TextureWrap vWrap)

        horizontalWrap = hWrap
        verticalWrap = vWrap
        Bind()
        gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_WRAP_S, hWrap:GetValue())
        gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_WRAP_T, vWrap:GetValue())

    end

    /*
    This action returns the minimization filter of this Texture. For more on how
    the TextureFilters work, see Libraries.Game.Graphics.TextureFilter.
    */
    action GetMinimizeFilter returns TextureFilter
        return minimizeFilter
    end

    /*
    This action returns the magnification filter of this Texture. For more on how
    the TextureFilters work, see Libraries.Game.Graphics.TextureFilter.
    */
    action GetMagnifyFilter returns TextureFilter
        return magnifyFilter
    end

    /*
    This action returns the horizontal texture wrapping mode. For more on how
    the TextureWrap works, see Libraries.Game.Graphics.TextureWrap.
    */
    action GetHorizontalWrap returns TextureWrap
        return horizontalWrap
    end

    /*
    This action returns the vertical texture wrapping mode. For more on how
    the TextureWrap works, see Libraries.Game.Graphics.TextureWrap.
    */
    action GetVerticalWrap returns TextureWrap
        return verticalWrap
    end
/*
    action UseCustomColor returns boolean
        return false
    end

    action GetTexture returns Texture
        return me
    end*/

    /*action PrepareVertices

        Array<number> vertices = GetVertices()

        number x = GetX()
        number y = GetY()

        number x2 = x + GetWidth()
        number y2 = y + GetHeight()

        number u = 0
        number v = 1
        number u2 = 1
        number v2 = 0

        vertices:Set(0, x)
        vertices:Set(1, y)
        // Index 2 is automatically handled by the drawing SpriteBatch.
        vertices:Set(3, u)
        vertices:Set(4, v)

        vertices:Set(5, x)
        vertices:Set(6, y2)
        // Index 7 is automatically handled by the drawing SpriteBatch.
        vertices:Set(8, u)
        vertices:Set(9, v2)

        vertices:Set(10, x2)
        vertices:Set(11, y2)
        // Index 12 is automatically handled by the drawing SpriteBatch.
        vertices:Set(13, u2)
        vertices:Set(14, v2)

        vertices:Set(15, x2)
        vertices:Set(16, y)
        // Index 17 is automatically handled by the drawing SpriteBatch.
        vertices:Set(18, u2)
        vertices:Set(19, v)
    end*/

    /*
    This action will release the memory used to store pixel information for this
    Texture. This frees up resources, but will make the Texture no longer usable,
    including in classes that may have loaded the Texture, such as in Drawable.
    Use this when you are completely finished with a Texture and no longer intend
    to use it.
    */
    system action Dispose

    /*
    This action will create a new Texture with a white line that connects an
    imaginary point at 0,0 to the provided x,y coordinates.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadLine(20, 100)
                    Drawable line
                    line:Load(texture)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y)
        Color white
        white = white:White()
        LoadLine(x, y, white)
    end

    /*
    This action will create a new Texture with a line of the given color that
    connects between an imaginary point at 0,0 to the provided x,y coordinates.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color cyan
                    cyan:SetColor(0, 1, 1, 1)
                    Texture texture
                    texture:LoadLine(20, 100, cyan)
                    Drawable line
                    line:Load(texture)
                    line:SetPosition(50, 50)
                    Add(line)
                end
            end
    */
    action LoadLine(integer x, integer y, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(x+1, y+1, format)

        /*
        integer originX = 0
        integer originY = 0
        if x < 0
            
        end*/

        pixmap:DrawLine(0, 0, x, y, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a hollow white rectangle with
    the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadRectangle(20, 100)
                    Drawable rectangle
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height)
        Color white
        white = white:White()
        LoadRectangle(width, height, white)
    end

    /*
    This action will create a new Texture with a hollow rectangle of the given
    color with the given width and height. This texture is then loaded into the
    Drawable.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color yellow
                    yellow:SetColor(1, 1, 0, 1)
                    Texture texture
                    texture:LoadRectangle(20, 100, yellow)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadRectangle(integer width, integer height, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        pixmap:DrawRectangle(0, 0, width, height, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white rectangle with
    the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledRectangle(20, 100)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height)
        Color white
        white = white:White()
        LoadFilledRectangle(width, height, white)
    end

    /*
    This action will create a new Texture with a solid rectangle of the given
    color with the given width and height.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color green
                    green:SetColor(0, 1, 0, 1)
                    Texture texture
                    texture:LoadFilledRectangle(20, 100, green)
                    Drawable rectangle
                    rectangle:Load(texture)
                    rectangle:SetPosition(50, 50)
                    Add(rectangle)
                end
            end
    */
    action LoadFilledRectangle(integer width, integer height, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        pixmap:FillRectangle(0, 0, width, height, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a hollow white circle with the
    given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadCircle(75)
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius)
        Color white
        white = white:White()
        LoadCircle(radius, white)
    end

    /*
    This action will create a new Texture with a hollow circle of the given
    color with the given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color red
                    red:SetColor(1, 0, 0, 1)
                    Texture texture
                    texture:LoadCircle(75, red)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadCircle(integer radius, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(radius * 2 + 2, radius * 2 + 2, format)

        pixmap:DrawCircle(radius + 1, radius + 1, radius, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white circle with the
    given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledCircle(75)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius)
        Color white
        white = white:White()
        LoadFilledCircle(radius, white)
    end

    /*
    This action will create a new Texture with a solid circle of the given
    color with the given radius.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color blue
                    blue:SetColor(0, 0, 1, 1)
                    Texture texture
                    texture:LoadCircle(75, blue)
                    Drawable circle
                    circle:Load(texture)
                    circle:SetPosition(50, 50)
                    Add(circle)
                end
            end
    */
    action LoadFilledCircle(integer radius, Color color)
        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(radius * 2 + 1, radius * 2 + 1, format)

        pixmap:FillCircle(radius, radius, radius, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will create a new Texture with a solid white triangle that is
    made of the points identified by the three given points.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Texture texture
                    texture:LoadFilledTriangle(0, 0, 200, 200, 400, 0)
                    Drawable triangle
                    triangle:Load(texture)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3)
        Color white
        white = white:White()
        LoadFilledTriangle(x1, y1, x2, y2, x3, y3, white)
    end

    /*
    This action will create a new Texture with a solid triangle of the given
    color that is made of the points identified by the three given points.

    Attribute: Example

            use Libraries.Game.Graphics.Texture
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Graphics.Color
            use Libraries.Game.Game

            class Main is Game
                
                action Main
                    StartGame()
                end

                action CreateGame
                    Color purple
                    purple:SetColor(0.5, 0, 0.5, 1)
                    Texture texture
                    texture:LoadFilledTriangle(0, 0, 200, 200, 400, 0, purple)
                    Drawable triangle
                    triangle:Load(texture)
                    triangle:SetPosition(50, 50)
                    Add(triangle)
                end
            end
    */
    action LoadFilledTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, Color color)
        integer width = x1
        if x2 > width
            width = x2
        end
        if x3 > width
            width = x3
        end

        integer height = y1
        if y2 > height
            height = y2
        end
        if y3 > height
            height = y3
        end

        PixelMap pixmap
        Format format
        format:SetValue(format:RGBA8888)
        pixmap:CreatePixelMap(width, height, format)

        // Correcting for pixel map drawing top-down instead of bottom-up.
        integer t1 = height - y1
        integer t2 = height - y2
        integer t3 = height - y3

        pixmap:FillTriangle(x1, t1, x2, t2, x3, t3, color)
        
        FileTextureData data
        data:InitializeFileTextureData(undefined, pixmap, format, false)
        
        LoadFromTextureData(data)
    end

    /*
    This action will set the texture wrapping of this Texture, assuming it is
    already bound and active. This method sacrifices safety for speed, and
    should never be used directly by users.
    */
    action UnsafeSetWrap(TextureWrap u, TextureWrap v)
        if u not= undefined and u:GetValue() not= horizontalWrap:GetValue()
            gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_WRAP_S, u:GetValue())
            horizontalWrap = u
        end

        if v not= undefined and v:GetValue() not= verticalWrap:GetValue()
            gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_WRAP_T, v:GetValue())
            verticalWrap = v
        end
    end

    /*
    This action will set the texture filter of this Texture, assuming it is
    already bound and active. This method sacrifices safety for speed, and
    should never be used directly by users.
    */
    action UnsafeSetFilter(TextureFilter min, TextureFilter mag)
        if min not= undefined and min:GetValue() not= minimizeFilter:GetValue()
            gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_MIN_FILTER, min:GetValue())
            minimizeFilter = min
        end

        if mag not= undefined and mag:GetValue() not= magnifyFilter:GetValue()
            gl20:SetTextureParameter(GetGLTarget(), gl20:GL_TEXTURE_MAG_FILTER, mag:GetValue())
            magnifyFilter = mag
        end
    end

end