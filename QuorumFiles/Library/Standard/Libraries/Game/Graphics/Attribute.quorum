package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Language.Object

class Attribute 
    
    public integer type = 0 //long?
    private integer typeBit = 0

    // Plugin:
    //private final static Array<String> types = new Array<String>();

    /* Dependent on long, needs to access the static types array.
    public final static long getAttributeType (final String alias) {
		for (int i = 0; i < types.size; i++)
			if (types.get(i).compareTo(alias) == 0) return 1L << i;
		return 0;
	}
    */
    system action GetAttributeType(text alias) returns integer//long?

    system action GetAttributeAlias(integer /*long?*/ type) returns text

    action SetAttribute(integer /*long?*/ setType)
        type = setType
        typeBit = setType:TrailingZeros()
    end

    blueprint action Copy returns Attribute

    action HashCode returns integer
        return 7489 * typeBit
    end

    action Equals(Attribute other) returns boolean
        return other:HashCode() = HashCode()
    end

    action Equals(Object object) returns boolean
        if object = undefined
            return false
        elseif not (object is Attribute)
            return false
        end

        Attribute temp = cast(Attribute, object)
        if temp = me
            return true
        elseif type not= temp:type
            return false
        end
        return Equals(temp)
    end

    /*

	/** Call this method to register a custom attribute type, see the wiki for an example. If the alias already exists, then that ID
	 * will be reused. The alias should be unambiguously and will by default be returned by the call to {@link #toString()}.
	 * @param alias The alias of the type to register, must be different for each dirrect type, will be used for debugging
	 * @return the ID of the newly registered type, or the ID of the existing type if the alias was already registered *-
	protected final static long register (final String alias) {
		long result = getAttributeType(alias);
		if (result > 0) return result;
		types.add(alias);
		return 1L << (types.size - 1);
	}


	@Override
	public String toString () {
		return getAttributeAlias(type);
	}
*/
    
end