package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.DirectionalLightsAttribute
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.PointLightsAttribute
use Libraries.Game.Graphics.AmbientCubemap

/*
The Environment class is a set of Attributes that specifically handles lighting.
*/
class Environment is Attributes

    /*
    This action will add a light to the environment. It can accept any light
    that inherits from Light as a parameter, but the Environment can only   
    use lights that are either DirectionalLight or PointLight. If the given
    light can't be used by the Environment, an error will be alerted.
    */
    action Add(Light light)
        if light is DirectionalLight
            Add(cast(DirectionalLight, light))
        elseif light is PointLight
            Add(cast(PointLight, light))
        elseif light is AmbientLight
            Add(cast(AmbientLight, light))
        else
            alert("I couldn't identify the type of this light! I can use DirectionalLight or PointLight.")
        end
    end

    /*
    This action will add an array of lights to the environment. Each light must
    be usable by the Environment. The Environment can use DirectionalLight and
    PointLight.
    */
    action Add(Array<Light> array)
        integer index = 0
        repeat array:GetSize() times
            Add(array:Get(index))
            index = index + 1
        end
    end

    /*
    Adds a DirectionalLight to this environment.
    */
    action Add(DirectionalLight light)
        DirectionalLightsAttribute newAttribute
        DirectionalLightsAttribute lightsAttribute = cast(DirectionalLightsAttribute, GetAttribute(newAttribute:GetDirectionalLightsValue()))
        if lightsAttribute = undefined
            Add(newAttribute)
            newAttribute:lights:Add(light)
        else
            lightsAttribute:lights:Add(light)
        end
    end

    /*
    Adds a PointLight to this environment.
    */
    action Add(PointLight light)
        PointLightsAttribute newAttribute
        PointLightsAttribute lightsAttribute = cast(PointLightsAttribute, GetAttribute(newAttribute:GetPointLightsValue()))
        if lightsAttribute = undefined
            Add(newAttribute)
            newAttribute:lights:Add(light)
        else
            lightsAttribute:lights:Add(light)
        end
    end

    /*
    This action will remove a light from the environment. The given light must
    be usable by the Environment, i.e. it is a DirectionalLight or PointLight.
    If the given light was not a part of the Environment before using Remove,
    nothing will happen.
    */
    action Remove(Light light)
        if light is DirectionalLight
            Remove(cast(DirectionalLight, light))
        elseif light is PointLight
            Remove(cast(PointLight, light))
        elseif light is AmbientLight
            Remove(cast(AmbientLight, light))
        else
            alert("I couldn't identify the type of this light! I can use DirectionalLight or PointLight.")
        end
    end

    /*
    This action will remove each light that is present in the given array from
    the Environment. Each light must be usable by the Environment, i.e., it is a
    DirectionalLight or PointLight. Otherwise, an error will be alerted. Lights
    that are present in the array but not in the Environment will have no effect.
    */
    action Remove(Array<Light> array)
        integer index = 0
        repeat array:GetSize() times
            Remove(array:Get(index))
            index = index + 1
        end
    end

    /*
    This action will remove the given DirectionalLight from the Environment. If
    the light was not present in the Environment before using this action, it
    will have no effect.
    */
    action Remove(DirectionalLight light)
        DirectionalLightsAttribute lightsAttribute
        if HasAttribute(lightsAttribute:GetDirectionalLightsValue())
            lightsAttribute = cast(DirectionalLightsAttribute, GetAttribute(lightsAttribute:GetDirectionalLightsValue()))
            lightsAttribute:lights:Remove(light)
            if lightsAttribute:lights:GetSize() = 0
                Remove(lightsAttribute:GetDirectionalLightsValue())
            end
        end
    end

    /*
    This action will remove the given PointLight from the Environment. If
    the light was not present in the Environment before using this action, it
    will have no effect.
    */
    action Remove(PointLight light)
        PointLightsAttribute lightsAttribute
        if HasAttribute(lightsAttribute:GetPointLightsValue())
            lightsAttribute = cast(PointLightsAttribute, GetAttribute(lightsAttribute:GetPointLightsValue()))
            lightsAttribute:lights:Remove(light)
            if lightsAttribute:lights:GetSize() = 0
                Remove(lightsAttribute:GetPointLightsValue())
            end
        end
    end

    /*
    This action will add ambient lighting to the Environment.
    */
    action Add(AmbientLight light)
        Add(light:GetAttribute())
    end

    /*
    This action will remove all ambient lighting from this Environment.
    */
    action Remove(AmbientLight light)
        RemoveAmbientLight()
    end

    /*
    This action will remove all ambient lighting from this Environment.
    */
    action RemoveAmbientLight
        ColorAttribute color
        Remove(color:GetAmbientLightValue())
    end

    /*
    Gets the AmbientLight set for this environment. If none is set, will return
    undefined.
    */
    action GetAmbientLight returns AmbientLight
        AmbientLight light
        ColorAttribute colorAttribute = cast(ColorAttribute, GetAttribute(light:GetAttribute():GetAmbientLightValue()))
        light:GetAttribute():SetAttribute(colorAttribute:GetAmbientLightValue(), colorAttribute:color)
        return light
    end

end