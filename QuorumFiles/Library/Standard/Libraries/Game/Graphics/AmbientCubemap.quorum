package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Compute.Vector3

class AmbientCubemap 

    public Array<number> data
    
    on create
        data:SetSize(18)
    end

    private action Clamp(number value) returns number
        if value < 0
            return 0
        elseif value > 1
            return 1
        end

        return value
    end

    action SetData(AmbientCubemap cube)
        SetData(cube:data)
    end

    action SetData(Array<number> copy)
        integer index = 0
        repeat copy:GetSize() times
            data:Set(index, copy:Get(index))
            index = index + 1
        end
    end

    action GetData returns Array<number>
        return data
    end

    /*
    Returns an element of the array at the given index. This is included to make
    it easier to access the data from the plugins.
    */
    action GetDataAtIndex(integer index) returns number
        return data:Get(index)
    end

    action SetColor(Color newColor)
        SetColor(newColor:GetRed(), newColor:GetGreen(), newColor:GetBlue())
    end

    action SetColor(number red, number green, number blue)
        integer index = 0
        repeat while index < data:GetSize()
            data:Set(index, red)
            data:Set(index + 1, green)
            data:Set(index + 2, blue)
            index = index + 3
        end
    end

    /*
    action GetColor(integer side) returns Color
        ...
    end
    */

    action Empty
        integer index = 0
        repeat data:GetSize() times
            data:Set(index, 0)
            index = index + 1
        end
    end

    action Clamp
        integer index = 0
        repeat data:GetSize() times
            number temp = Clamp(data:Get(index))
            data:Set(index, temp)
            index = index + 1
        end
    end

    action Add(number red, number green, number blue)
        integer index = 0
        repeat while index < data:GetSize()
            data:Set(index, data:Get(index) + red)
            data:Set(index + 1, data:Get(index + 1) + green)
            data:Set(index + 2, data:Get(index + 2) + blue)
            index = index + 3
        end
    end

    action Add(Color color)
        Add(color:GetRed(), color:GetGreen(), color:GetBlue())
    end

    action Add(number red, number green, number blue, number x, number y, number z)
        number x2 = x * x
        number y2 = y * y
        number z2 = z * z
        number d = x2 + y2 + z2
        
        if d = 0
            return now
        end

        d = (1 / d) * (d + 1)
        number redD = red * d
        number greenD = green * d
        number blueD = blue * d
        
        // If the x value isn't positive, we increase the index. This will cause
        // the addition to apply to the opposite face of the cube mapping.
        integer index = 0
        if not (x > 0)
            index = 3
        end
        data:Set(index, data:Get(index) + x2 * redD)
        data:Set(index + 1, data:Get(index + 1) + x2 * greenD)
        data:Set(index + 2, data:Get(index + 2) + x2 * blueD)

        // If the y value isn't positive, we increase the index. This will cause
        // the addition to apply to the opposite face of the cube mapping.
        index = 6
        if not (y > 0)
            index = 9
        end
        data:Set(index, data:Get(index) + y2 * redD)
        data:Set(index + 1, data:Get(index + 1) + y2 * greenD)
        data:Set(index + 2, data:Get(index + 2) + y2 * blueD)

        // If the z value isn't positive, we increase the index. This will cause
        // the addition to apply to the opposite face of the cube mapping.
        index = 12
        if not (z > 0)
            index = 15
        end
        data:Set(index, data:Get(index) + z2 * redD)
        data:Set(index + 1, data:Get(index + 1) + z2 * greenD)
        data:Set(index + 2, data:Get(index + 2) + z2 * blueD)
    end

    action Add(Color color, Vector3 direction)
        Add(color:GetRed(), color:GetGreen(), color:GetBlue(), direction:GetX(), direction:GetY(), direction:GetZ())
    end

    action Add(Color color, Vector3 point, Vector3 target, number intensity)
        number t = intensity / (1 + target:Distance(point))
        Add(color:GetRed() * t, color:GetGreen() * t, color:GetBlue() * t, target:GetX() - point:GetX(),
            target:GetY() - point:GetY(), target:GetZ() - point:GetZ())
    end

end