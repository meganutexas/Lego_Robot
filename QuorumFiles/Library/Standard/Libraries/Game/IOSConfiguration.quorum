package Libraries.Game

class IOSConfiguration is ApplicationConfiguration
    
    /*
    A color format mode. This mode uses 8 bits each for red, green, blue, and
    alpha channels. This is the default color mode.
    */
    public constant integer RGBA8888 = 1

    /*
    A color format mode. This mode uses 5 bits each for the red and blue
    channels, and 6 bits for the green channel.
    */
    public constant integer RGB565 = 2

    /*
    A color format mode. This mode will use 8 bits each for red, green, blue,
    and alpha channels, and will keep the displayed colors in the sRGB color
    space.
    */
    public constant integer SRGBA8888 = 3

    /*
    A depth format mode. This will set the depth buffer to use 16 bits. This is
    the default depth format mode.
    */
    public constant integer DEPTH_16 = 16

    /*
    A depth format mode. This will set the depth buffer to use 24 bits.
    */
    public constant integer DEPTH_24 = 24

    /*
    Indicates that the given feature should not be used. Valid for the
    depth format, stencil format, or multisample format. This is the default
    value for the stencil format and multisample format.
    */
    public constant integer NONE = 0

    /*
    A stencil format mode. This will set the stencil buffer to use 8 bits.
    */
    public constant integer STENCIL_8 = 8

    /*
    A multisample format. This will set the multisampling buffer to use 4x
    sampling.
    */
    public constant integer SAMPLE_4X = 4

    /*
    Whether or not the screen should be prevented from dimming due to inactivity.
    */
    public boolean preventScreenDimming = true

    /*
    Whether or not portrait orientation is supported for this game.
    */
    public boolean portraitSupported = true

    /*
    Whether or not landscape orientation is supported for this game.
    */
    public boolean landscapeSupported = true

    // NOTE: The default in libGDX was RGB565, but because desktop applications
    // default to RGBA8888, that was selected in this case for consistency.
    /*
    The color format of the application. The value should be RGBA8888, RGB565,
    or SRGBA8888. By default it is RGBA8888.
    */
    public integer colorFormat = RGBA8888

    /*
    The depth format of the application. The value should be DEPTH_16, DEPTH_24,
    or NONE. The default is DEPTH_16.
    */
    public integer depthFormat = DEPTH_16

    /*
    The stencil buffer format of the application. The value should be STENCIL_8
    or NONE. By default, the value is NONE.
    */
    public integer stencilFormat = NONE

    /*
    The multisample format of the application. The value should be SAMPLE_4X or
    NONE. The default value is NONE.
    */
    public integer multisampleFormat = NONE

    /*
    The number of frames per second the application will target for. 60 is the
    default value.
    */
    public integer preferredFramesPerSecond = 60

    /* NOTE ON SCALING:
    libGDX goes the opposite way with scale, where a smaller scale value will
    make objects larger on the screen (the logic being you are scaling down the
    screen size). In our code, we make a larger scaling value cause items to be
    drawn larger on the screen, thus reducing the effective screen size, in
    order to maintain consistency with how scaling works with Drawables.
    */
    
    /*
    The scale factor to use on large screens with retina display, i.e. iPad 3+.
    A large scale value will make drawn objects on the screen larger, which in
    turn will cause the screen to appear to have fewer pixels while rendering
    the game. For example, a scale of 1.0 will have no effect, while a scale of
    2.0 will make all drawn objects appear twice as large. The default value is
    1.0.
    */
    public number largeRetinaDisplayScale = 1.0

    /*
    The scale factor to use on small screens with retina display, i.e. iPhone 4+.
    A large scale value will make drawn objects on the screen larger, which in
    turn will cause the screen to appear to have fewer pixels while rendering
    the game. For example, a scale of 1.0 will have no effect, while a scale of
    2.0 will make all drawn objects appear twice as large. The default value is
    1.0.
    */
    public number smallRetinaDisplayScale = 1.0

    /*
    The scale factor to use on large screens without retina display, i.e. iPad 1-2.
    A large scale value will make drawn objects on the screen larger, which in
    turn will cause the screen to appear to have fewer pixels while rendering
    the game. For example, a scale of 1.0 will have no effect, while a scale of
    2.0 will make all drawn objects appear twice as large. The default value is
    1.0.
    */
    public number largeNonRetinaDisplayScale = 1.0

    /*
    The scale factor to use on small screens without retina display, i.e. iPhone 1-3.
    A large scale value will make drawn objects on the screen larger, which in
    turn will cause the screen to appear to have fewer pixels while rendering
    the game. For example, a scale of 1.0 will have no effect, while a scale of
    2.0 will make all drawn objects appear twice as large. The default value is
    1.0.
    */
    public number smallNonRetinaDisplayScale = 1.0

    // NOTE: in libGDX, useAccelerometer and useCompass default to true, not false.
    // NOTE: Accelerometer not yet implemented. First pass on iOS input is for touch only.

    /*
    Whether or not the application should use the device's accelerometer. By
    default, this value is false.
    */
    //public boolean useAccelerometer = false

    /*
    Whether or not the application should use the device's compass. By default,
    this value is false.
    */
    public boolean useCompass = false

    /*
    How many seconds should pass before each update to the accelerometer, if
    useAccelerometer is true.
    */
    //public number accelerometerUpdate = 0.05

    /*
    How many seconds should pass before each update to the compass, if 
    useCompass is true.
    */
    public number compassUpdate = 0.05

    /*
    Whether or not to allow background music to be played if on an iPod. By
    default, this value is false.
    */
    public boolean allowIPod = false

    /*
    Whether or not the on screen keyboard should be closed when the user hits
    the return key. By default, this value is true.
    */
    public boolean keyboardCloseOnReturn = true
    
end