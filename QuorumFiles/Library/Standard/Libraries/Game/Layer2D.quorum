package Libraries.Game

use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.OrthographicCamera
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Containers.Blueprints.Iterator

class Layer2D is Layer

    Array<Item2D> items
    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMovementListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<TouchListener> touchListeners
    Camera camera = undefined
    Painter2D painter

    on create
        OrthographicCamera cam
        camera = cam
    end

    /*
    This action will add an Item2D to this Layer. It will be updated along with
    the rest of the layer, and will be drawn on the screen (if it is visible and
    possible to draw the given Item2D).
    */
    action Add(Item2D item)
        items:Add(item)
    end

    /*
    This action will remove an Item2D from this Layer. If the item was not a
    part of this layer, this action will have no effect.
    */
    action Remove(Item2D item)
        items:Remove(item)
    end

    /*
    This action will get an Item2D stored in the Layer at a given index in the
    layer's internal array of children.
    */
    action Get(integer index) returns Item2D
        return items:Get(index)
    end

    /*
    This action will return an iterator of all the Item2D's stored inside this
    Layer.
    */
    action GetIterator returns Iterator<Item2D>
        return items:GetIterator()
    end

    /*
    This action will set the value of the internal children array to be the
    given Item2D. The previous value will be overwritten. If the index does not
    exist in the array (e.g., the given index is larger than the number of items
    stored in this layer), an error will be thrown.
    */
    action Set(integer index, Item2D item)
        items:Set(index, item)
    end

    /*
    This action will update all of the items contained within this Layer. The
    given number of seconds will be passed to each updated item.
    */
    action Update(number seconds)
        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):UpdateAll(seconds)
            counter = counter + 1
        end
    end
    
    /*
    This action will draw all items in this Layer on the screen (if they can be
    drawn and they aren't hidden). If the Layer is currently hidden, then this
    action will do nothing.
    */
    action Draw
        if not IsShowing()
            return now
        end

        camera:Update()
        painter:ApplyCamera(camera)
        
        painter:Begin()

        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):Draw(painter)
            counter = counter + 1
        end

        painter:End()
    end

    /*
    This action will set the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action SetCamera(Camera cam)
        camera = cam
    end

    /*
    This action will return the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action GetCamera returns Camera
        return camera
    end

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event.
    */
    action ProcessMouseEvent(MouseEvent event)
    
        boolean processing = true
        integer counter = items:GetSize()
        Item2D temp = undefined

        Vector3 pointVector = camera:ScreenToWorldCoordinates(event:GetX(), event:GetY())

        repeat while counter > 0 and processing
            counter = counter - 1
            temp = items:Get(counter):GetItemAt(pointVector:GetX(), pointVector:GetY())

            if temp not= undefined
                temp:ProcessMouseEvent(event)
                processing = not event:WasEventHandled()
            end
        end
    end

    /*
    This action will notify touch listeners that are a part of this layer of the
    given touch event.
    */
    action ProcessTouchEvent(TouchEvent event)
        
        boolean processing = true
        integer counter = items:GetSize()
        Item2D temp = undefined

        Vector3 pointVector = camera:ScreenToWorldCoordinates(event:GetX(), event:GetY())

        repeat while counter > 0 and processing
            counter = counter - 1
            temp = items:Get(counter):GetItemAt(pointVector:GetX(), pointVector:GetY())

            if temp not= undefined
                temp:ProcessTouchEvent(event)
                processing = not event:WasEventHandled()
            end
        end
    end

    /*
    This action will add a MouseListener to the layer. When the layer receives a
    mouse event, it will first try to find the topmost item which can handle the
    event. If the event is not handled, then all MouseListeners in the layer 
    will receive the event.
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /*
    This action will add a MouseMovementListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseMovementListeners in the layer will receive the event.
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Add(listener)
    end

    /*
    This action will add a MouseWheelListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseWheelListeners in the layer will receive the event.
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /*
    This action will add a TouchListener to the layer. When the layer
    receives a touch event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    TouchListeners in the layer will receive the event.
    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end
    
    /*
    This action will remove a MouseListener from the layer. The listener will no
    longer receive events from the layer. If the given MouseListener is not on
    the layer before calling this action, then this action will have no effect.
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action will remove a MouseMovementListener from the layer. The listener
    will no longer receive events from the layer. If the given 
    MouseMovementListener is not on the layer before calling this action, then 
    this action will have no effect.
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Remove(listener)
    end

    /*
    This action will remove a MouseWheelListener from the layer. The listener 
    will no longer receive events from the layer. If the given 
    MouseWheelListener is not on the layer before calling this action, then this
    action will have no effect.
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action will remove a TouchListener from the layer. The listener will no
    longer receive events from the layer. If the given TouchListener is not on
    the layer before calling this action, then this action will have no effect.
    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    Using SetColorFilter will tint all drawn objects on the layer that do not
    have their own custom color tint. For example, using a red color filter will
    make all objects drawn on the layer to appear to be more red.
    */
    action SetColorFilter(Color color)
        painter:SetColor(color)
    end

    /*
    SetColorFilter can be called using four number parameters instead of a
    color object. The four parameters are the red, green, blue, and opacity
    of the filter, respectively. All four of the parameters should be between 0
    and 1, representing between 0% and 100% of that color component. For example,
    a value of 0 for red means that the tinting color will have no red, while a
    value of 1 will have all red components. An opacity of 0 is totally
    transparent, while an opacity of 1 will be totally visible. 
    */
    action SetColorFilter(number red, number green, number blue, number alpha)
        painter:SetColor(red, green, blue, alpha)
    end
end