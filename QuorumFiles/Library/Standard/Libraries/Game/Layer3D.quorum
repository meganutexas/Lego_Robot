package Libraries.Game

use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.PerspectiveCamera
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Containers.Array
use Libraries.Interface.Item3D
use Libraries.Game.Graphics.Painter3D
use Libraries.Game.Graphics.Environment
use Libraries.Containers.Blueprints.Iterator
use Libraries.Game.Graphics.Light
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLightsAttribute
use Libraries.Game.Graphics.PointLightsAttribute

class Layer3D is Layer

    Array<Item3D> items
    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMovementListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<TouchListener> touchListeners
    Camera camera = undefined
    Painter3D painter
    Environment environment

    /*
    This array is used when adding or removing Items to the game to find any
    lights in the children hierarchy that need to be added/removed from the
    environment at the same time. Since it will be reused often, the array
    should be emptied after each use.
    */
    Array<Light> lightGatheringArray

    on create
        PerspectiveCamera cam
        camera = cam
        camera:SetPosition(0, 3, -5)
        camera:LookAt(0, 0, 0)
        camera:Update()
        painter:SetEnvironment(environment)
        painter:SetCamera(camera)
    end

    /*
    This action will add an Item3D to this Layer. It will be updated along with
    the rest of the layer, and will be drawn on the screen (if it is visible and
    possible to draw the given Item3D).
    */
    action Add(Item3D item)
        items:Add(item)

        // Find all lights in the item's children hierarchy.
        item:GetLights(lightGatheringArray)

        // Add all found lights to the environment.
        environment:Add(lightGatheringArray)

        // Empty the array after, to allow for re-use.
        lightGatheringArray:Empty()
    end

    /*
    This action will remove an Item3D from this Layer. If the item was not a
    part of this layer, this action will have no effect.
    */
    action Remove(Item3D item)
        items:Remove(item)

        // Find all lights in the item's children hierarchy.
        item:GetLights(lightGatheringArray)

        // Remove all found lights from the environment.
        environment:Remove(lightGatheringArray)

        // Empty the array after, to allow for re-use.
        lightGatheringArray:Empty()
    end

    /*
    This action will get an Item3D stored in the Layer at a given index in the
    layer's internal array of children.
    */
    action Get(integer index) returns Item3D
        return items:Get(index)
    end

    /*
    This action will return an iterator of all the Item3D's stored inside this
    Layer.
    */
    action GetIterator returns Iterator<Item3D>
        return items:GetIterator()
    end

    /*
    This action will set the value of the internal children array to be the
    given Item3D. The previous value will be overwritten. If the index does not
    exist in the array (e.g., the given index is larger than the number of items
    stored in this layer), an error will be thrown.
    */
    action Set(integer index, Item3D item)
        /*
        Before overwriting the old data in the array, we want to make sure that
        any lights in the item's hierarchy are removed from the environment.
        */
        Item3D oldItem = items:Get(index)
        if oldItem not= undefined
            oldItem:GetLights(lightGatheringArray)
            environment:Remove(lightGatheringArray)
            lightGatheringArray:Empty()
        end

        items:Set(index, item)

        /*
        We now also add the new item's lighting data to the environment.
        */
        if item not= undefined
            item:GetLights(lightGatheringArray)
            environment:Remove(lightGatheringArray)
            lightGatheringArray:Empty()
        end
    end

    /*
    This action will update all of the items contained within this Layer. The
    given number of seconds will be passed to each updated item.
    */
    action Update(number seconds)
        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):UpdateAll(seconds)
            counter = counter + 1
        end
    end

    /*
    This action will draw all items in this Layer on the screen (if they can be
    drawn and they aren't hidden). If the Layer is currently hidden, then this
    action will do nothing.
    */
    action Draw
        if not IsShowing()
            return now
        end
        
        camera:Update()

        painter:Begin()

        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):Draw(painter)
            counter = counter + 1
        end

        painter:End()
    end

    /*
    This action will set the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action SetCamera(Camera cam)
        camera = cam
        painter:SetCamera(camera)
    end

    /*
    This action will return the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action GetCamera returns Camera
        return camera
    end

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event.
    */
    action ProcessMouseEvent(MouseEvent event)
        /*
        To be implemented - requires BoundingBox, Ray, and Intersector (or the
        functionality of Intersector). Ray is used to get the PickRay from the
        Camera.
        */
    end

    /*
    This action will notify touch listeners that are a part of this layer of the
    given touch event.
    */
    action ProcessTouchEvent(TouchEvent event)
        /*
        To be implemented - requires BoundingBox, Ray, and Intersector (or the
        functionality of Intersector). Ray is used to get the PickRay from the
        Camera.
        */
    end

    /*
    This action will add a MouseListener to the layer. When the layer receives a
    mouse event, it will first try to find the topmost item which can handle the
    event. If the event is not handled, then all MouseListeners in the layer 
    will receive the event.
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /*
    This action will add a MouseMovementListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseMovementListeners in the layer will receive the event.
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Add(listener)
    end

    /*
    This action will add a MouseWheelListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseWheelListeners in the layer will receive the event.
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /*
    This action will add a TouchListener to the layer. When the layer
    receives a touch event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    TouchListeners in the layer will receive the event.
    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end
    
    /*
    This action will remove a MouseListener from the layer. The listener will no
    longer receive events from the layer. If the given MouseListener is not on
    the layer before calling this action, then this action will have no effect.
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action will remove a MouseMovementListener from the layer. The listener
    will no longer receive events from the layer. If the given 
    MouseMovementListener is not on the layer before calling this action, then 
    this action will have no effect.
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Remove(listener)
    end

    /*
    This action will remove a MouseWheelListener from the layer. The listener 
    will no longer receive events from the layer. If the given 
    MouseWheelListener is not on the layer before calling this action, then this
    action will have no effect.
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action will remove a TouchListener from the layer. The listener will no
    longer receive events from the layer. If the given TouchListener is not on
    the layer before calling this action, then this action will have no effect.
    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    This action will add the given light to the Layer3D. It will be used during
    lighting of all objects on the layer.
    */
    action Add(DirectionalLight light)
        environment:Add(light)
    end
    
    /*
    This action will add a PointLight to the Layer3D. It will be added both as
    an item and a source of lighting.
    */
    action Add(PointLight light)
        Add(cast(Item3D, light))
    end

    /*
    This action will remove the given DirectionalLight from the Layer3D.
    */
    action Remove(DirectionalLight light)
        environment:Remove(light)
    end

    /*
    This action will remove the given PointLight from the Layer3D. It will no
    longer be part of the item hierarchy of this Layer, and will no longer
    provide lighting in the scene.
    */
    action Remove(PointLight light)
        Remove(cast(Item3D, light))
    end

    /*
    This action will set the ambient lighting present in this Layer. If the
    layer already had ambient lighting, it will be overwritten.
    */
    action SetAmbientLight(AmbientLight light)
        environment:Add(light)
    end

    /*
    This action will remove all ambient lighting from the Layer.
    */
    action RemoveAmbientLight
        environment:RemoveAmbientLight()
    end
    
    /*
    This action will return the AmbientLighting of the scene. If the scene
    doesn't have any ambient lighting, then this action will return undefined.
    */
    action GetAmbientLight returns AmbientLight
        return environment:GetAmbientLight()
    end

    /*
    This action will get an iterator containing all of the DirectionalLights
    stored inside this layer.
    */
    action GetDirectionalLights returns Iterator<DirectionalLight>
        DirectionalLightsAttribute temp
        DirectionalLightsAttribute dlAttribute = (cast(DirectionalLightsAttribute, environment:GetAttribute(temp:GetDirectionalLightsValue())))
        if dlAttribute not= undefined
            return dlAttribute:lights:GetIterator()
        else
            return temp:lights:GetIterator()
        end
    end

    /*
    This action will get an iterator containing all of the PointLights
    stored inside this layer.
    */
    action GetPointLights returns Iterator<PointLight>
        PointLightsAttribute temp
        PointLightsAttribute plAttribute = (cast(PointLightsAttribute, environment:GetAttribute(temp:GetPointLightsValue())))
        if plAttribute not= undefined
            return plAttribute:lights:GetIterator()
        else
            return temp:lights:GetIterator()
        end
    end

    /*
    This action will return a directional light stored at the given index in the
    Layer's array of directional lights. Each type of light stored in the Layer
    is kept in a separate array from other types. If there are no directional
    lights added to this layer, or if the index is out of bounds, this action
    will produce an error.
    */
    action GetDirectionalLight(integer index) returns DirectionalLight
        DirectionalLightsAttribute dlAttribute
        dlAttribute = (cast(DirectionalLightsAttribute, environment:GetAttribute(dlAttribute:GetDirectionalLightsValue())))
        if dlAttribute = undefined
            alert("You asked me to retrieve a directional light, but there are none added to this Layer!")
        end

        return dlAttribute:lights:Get(index)
    end

    /*
    This action will return a point light stored at the given index in the
    Layer's array of point lights. Each type of light stored in the Layer
    is kept in a separate array from other types. If there are no directional
    lights added to this layer, or if the index is out of bounds, this action
    will produce an error.
    */
    action GetPointLight(integer index) returns PointLight
        PointLightsAttribute plAttribute
        plAttribute = (cast(PointLightsAttribute, environment:GetAttribute(plAttribute:GetPointLightsValue())))
        if plAttribute = undefined
            alert("You asked me to retrieve a point light, but there are none added to this Layer!")
        end

        return plAttribute:lights:Get(index)
    end
end