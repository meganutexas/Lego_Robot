package Libraries.Robots.Lego

/*
This class is an object representation of the LEGO EV3 Mindstorms Touch Sensor.
It is used to detect when the sensor is pressed in.
Generally, this button is pressed in by the user to tell the robot to perform some action.

Attribute: Author Evan Pierzina

Attribute: Example
use Libraries.Robots.Lego.TouchSensor
use Libraries.Robots.Lego.Sound
use Libraries.Robots.Lego.Motor
use Libraries.Robots.Lego.Utility

class Main
    action Main
        TouchSensor touchSensor
        Sound sound
        Motor motor
        Utility utility

        touchSensor:SetPort(touchSensor:PORT_2) //touch sensor connected to port 2 on the robot
        motor:SetSpeed(motor:MOTOR_B, 480)
        motor:SetSpeed(motor:MOTOR_C, 480)      //two motors used to move the robot, connected to ports B and C
        repeat 5 times
            if touchSensor:IsPressed()
                motor:RotateForward(motor:MOTOR_B)
                motor:RotateForward(motor:MOTOR_C)    //robot will move forward if button was pressed
            else
                sound:Beep()    //robot will beep if the button was not pressed in
            end
            utility:DelayMilliseconds(1000)  //check if the button is pressed in every second
            motor:Stop(motor:MOTOR_B)
            motor:Stop(motor:MOTOR_C)
        end
    end
end
*/

class TouchSensor
    public constant integer PORT_1 = 1
    public constant integer PORT_2 = 2
    public constant integer PORT_3 = 3
    public constant integer PORT_4 = 4
    
    /*
    This action lets the program know which port on the robot that the touch sensor being used is plugged into.
    As such, this action must be called before any other action in the TouchSensor class will work.
    
    Attribute: Parameter portNumber specifies the port on the robot that the touch sensor is plugged into.
    The port number corresponds to the actual number printed above the port on the EV3 brick. Valid port numbers are 1, 2, 3 or 4.
    There are class variables that correspond to the valid ports.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    use Libraries.Robots.Lego.TouchSensor
    use Libraries.Robots.Lego.Motor
    use Libraries.Robots.Lego.Utility


    TouchSensor touchSensor
    Motor motor
    Utility utility

    touchSensor:SetPort(touchSensor:PORT_3) //touch sensor connected to port 3 of the robot
    motor:SetSpeed(motor:MOTOR_B, 720)
    motor:SetSpeed(motor:MOTOR_C, 720)      //two motors used to move the robot, connected to ports B and C
    repeat 10 times
        if touchSensor:IsPressed()
           motor:RotateForward(motor:MOTOR_B)
           motor:RotateBackward(motor:MOTOR_C)    //spin in a certain direction
        else
           motor:RotateBackward(motor:MOTOR_B)
           motor:RotateForward(motor:MOTOR_C)     //spin in the opposite direction
        end
        utility:DelayMilliseconds(1000)  //check if the button is pressed in every second
    end
    */
    
    system action SetPort(integer portNumber)
    
    /*
    This action checks if the touch sensor is currently pressed in or not.
    
    Attribute: Returns a boolean value indicating whether the button is pressed in (true) or not pressed in (false).
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    use Libraries.Robots.Lego.TouchSensor
    use Libraries.Robots.Lego.Button
    use Libraries.Robots.Lego.Utility

    TouchSensor touchSensor
    Button button
    Utility utility

    touchSensor:SetPort(touchSensor:PORT_1)         //touch sensor connected to port 1 of the robot
    integer lightColor = 0
    repeat 20 times
        if touchSensor:IsPressed()
            lightColor = lightColor + 1             //update the light color
            button:SetLightPattern(lightColor mod 3 + 1)    //sets the pattern to either 1, 2, or 3 which corresponds to a solid green, red, or orange light, respectively
        else
            button:SetLightPattern(button:NO_LIGHT)         //turn off the light when the button is not pressed in
        end
        utility:DelayMilliseconds(500)              //check if the button is pressed in every 100 milliseconds
    end
    */
    
    system action IsPressed returns boolean
end